/**
 * @fileOverview Khepri inlining.
 * 
 * This stage does the following:
 * - Replace operators converted to functions with references to a global.
 * - Add globals to programs and packages.
 * - Propagate constant values, replacing identifiers with values.
 * - Fold constant subexpressions.
 * - Potentially inline functions.
 * - Rewrite curries and calls of inlined forms to let expressions.
 */
package (
    optimize)
with
    import 'bes::record' record,

    import 'hashtrie' hashtrie,
    
    import 'khepri-ast-zipper' {khepriZipper},

    import 'khepri-ast::node' {Node setData 'modify': modifyNode},
    import 'khepri-ast::declaration' ast_declaration,
    import 'khepri-ast::statement' ast_statement,
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::pattern' ast_pattern,
    import 'khepri-ast::package' ast_package,
    import 'khepri-ast::program' ast_program,
    import 'khepri-ast::value' ast_value,
    
    import 'akh::base' {
        next
        'sequence': seq
        'sequencea': seqa},
    
    import 'akh::unique' Unique,
    import 'akh::trans::state' StateT,

    import 'zipper-m::trans::zipper' ZipperT,
    import 'zipper-m::walk' walk,
    
    import './ast' {
        isIdentifier
        getUd
        getUid
        isLambda
        isPrimitive
        isNumberish
        isTruthy},
    import './builtin' {builtins definitions},
    import './fun' fun#{flattenr flatten concat},
    import './inline/bindings' binding,
    import './inline/expand' {
        expandCallee
        expandCurry},
    import './inline/rename' {rename incCount}
in {

/* Config
 ******************************************************************************/
var MAX_EXPANSION_DEPTH := 1;

/* Forward
 ******************************************************************************/
var _check;

/* Binding
 ******************************************************************************/
var Binding = record.declare(null, [
    'value',
    'immutable',
    'simple']);

var IMMUTABLE := true,
    MUTABLE := false;

/* State
 ******************************************************************************/
var State := record.declare(null, [
    'bindings',
    'working',
    'globals',
    'outer',
    'ctx']);

State.empty = new State(
    binding.empty,
    binding.empty,
    hashtrie.empty,
    null,
    hashtrie.empty);

State.prototype.addBinding = \uid target simple =s->
    s.setBindings(
        binding.setBinding(uid, Binding.create(target, IMMUTABLE, simple), s.bindings));

State.prototype.addWorking = \uid target simple =s->
    s.setWorking(
        binding.setBinding(uid, Binding.create(target, MUTABLE, simple), s.working));

State.prototype.push = \=s->
    s.setOuter(s)
        .setWorking(binding.empty);

State.prototype.pop = \=s->
    s.outer
        .setBindings(s.bindings)
        .setGlobals(s.globals)
        .setCtx(s.ctx)
        .setWorking(
            // Delete working bindings modified in inner from outer scope.
            hashtrie.fold(
                \p {key} ->
                    hashtrie.set(key, null, p),
                s.outer.working,
                s.working));
 
/* Expansion
 ******************************************************************************/
var markExpansion = \id count target ->
    setData(
        id,
        'expand',
        {'count': count, 'value': target});

var getExpansion := getUd @ 'expand';

var isExpansion := getExpansion;

var canExpand := \exp -> 
    exp.count < MAX_EXPANSION_DEPTH;

/**
 * Try to expand `node`.
 */
var expandNode = \node ->
    ?isExpansion node
        :let uid = getUid node, exp = getExpansion node in
            ?canExpand exp
                :exp.value
                :setData(node, 'expand', null)
        :node;

/* Monad
 ******************************************************************************/
var M = ZipperT (StateT Unique);

var run = \c ctx state seed ->
    Unique.runUnique(
        StateT.evalStateT(
            ZipperT.runZipperT(c, ctx),
            state),
        seed);

var pass = M.of null;

var unique = M.chain @ (M.liftInner (Unique.unique));

// State Operations
////////////////////////////////////////
var getState := M.lift (M.inner.get);

var modifyState := M.lift <\ M.inner.modify;

// Movement
////////////////////////////////////////
var extract = M.chain @ M.node;

var modify = M.modifyNode;
var set = M.setNode;

var up = M.up;
var down = M.down;
var right = M.right;

var moveChild =  M.child;

// Expansion
////////////////////////////////////////
/**
 * Expand the value from `exp`, passing result to `f`.
 */
var expand = \exp f ->
    exp.chain(expandNode \> f);

// Bindings Operations
////////////////////////////////////////
/**
 * Register an immutable binding.
 * 
 * Immutable bindings are shared across blocks.
 * 
 * @param uid Immutable binding unique id.
 * @param value Value bound.
 */
var addBinding = \uid value simple ->
    modifyState \ s ->
        s.addBinding(uid, value, simple);

/**
 * Set the working value of a binding.
 * 
 * The working value is the value of a (perhaps mutable) binding at a point in
 * execution.
 * 
 * @param uid Identifier unique id.
 * @param value Value bound.
 */
var addWorking = \uid value simple ->
    modifyState \ s ->
        s.addWorking(uid, value, simple);

/**
 * Get the value of the current binding for `uid`.
 * 
 * Prefers working bindings over immutable bindings.
 * 
 * @param uid Identifier unique id.
 */
var getBinding = \uid ->
    ?uid
        :getState.map \ {bindings working} ->
            (binding.getBinding(uid, bindings) || binding.getBinding(uid, working))
        :pass;

/**
 * 
 */
var tryPrune = \id ->
    let uid = getUid id in
        getBinding(uid).chain \ binding ->
            ?binding && binding.simple && !isExpansion binding.value && (isPrimitive binding.value || (binding.immutable && isIdentifier binding.value))
                :set []
                :pass;

// Scoping operations
////////////////////////////////////////
/**
 * Enter a new scoping block.
 */
var push = modifyState \ s -> s.push();

/**
 * Exit the current the current scoping block.
 */
var pop = modifyState \ s -> s.pop();

/**
 * Evaluate `body` in a new scoping block.
 */
var block = \body(...) ->
    seq(
        push,
        seqa(body),
        pop);

// Globals Operations
////////////////////////////////////////
/**
 * Get globals.
 */
var globals = M.chain @ (getState.map \ s -> hashtrie.keys(s.globals));

/**
 * Add a new global.
 */
var addGlobal = \name ->
    modifyState \ s ->
        s.setGlobals(hashtrie.set(name, name, s.globals));

/**
 * 
 */
var createGlobalDeclarations = \g ->
    ast_declaration.VariableDeclaration.create(null,
        g.map \ x ->
            ast_declaration.VariableDeclarator.create(null,
                builtins.(x),
                definitions.(x)));
/*
 ******************************************************************************/
/**
 * Move to a child along `edge` and perform a list of operations. Return to parent.
 */
var child = \edge ...ops ->
    seq(
        moveChild edge,
        seqa ops,
        up);

/**
 * Rewrite the current node.
 */
var checkTop = extract \ x -> _check x; // forward

/**
 * Rewrite a child node.
 */
var visitChild = \edge ->
    child(edge,
        checkTop);

/**
 * When `test` is true for current node, evaluate consequent. Otherwise evalaute
 * alternate.
 */
var when = \test consequent alternate ->
    extract \ node ->
        ?test node
            :consequent
            :(alternate || pass);

/*
 ******************************************************************************/
/**
 * Register an immutable binding of `id` to `value`.
 */
var addBindingForNode = \id value ->
    let uid = getUid id in
        ?isPrimitive value
            :addBinding(uid, value, true)
        
        :?isLambda value
            :addBinding(uid, markExpansion(id, 0, value), true)
        
        :?isIdentifier value
            :getBinding(getUid value).chain \ binding ->
                ?binding && binding.immutable
                    :addBinding(uid,
                        ?binding.simple && binding.value
                            :binding.value
                            :value,
                        true)
                    :addBinding(uid, value, false)
        
        :addBinding(uid, value, false);

/*
 ******************************************************************************/
var peepholes = {};

var addRewrite = \type f -> {
    if (Array.isArray type)
        type.forEach \ type -> addRewrite(type, f);
    else
        peepholes.(type) = f;
};

/* Operator To Function
 ******************************************************************************/
/**
 * Convert Unary Op Expression to function.
 */
addRewrite@'UnaryOperatorExpression' <|
    seq(
        extract \ {op} ->
            seq(
                addGlobal(op),
                set <| builtins.(op)),
        checkTop);

/**
 * Convert binary op expression to function.
 */
addRewrite@'BinaryOperatorExpression' <|
    seq(
        extract \ {op flipped} ->
            let name = ?flipped : '_' + op : op in
                seq(
                    addGlobal(name),
                    set <| builtins.(name)),
        checkTop);

/**
 * Convert ternary op expression to function.
 */
addRewrite@'TernaryOperatorExpression' <|
    seq(
        addGlobal('?'),
        set <| builtins.('?'),
        checkTop);

/* 
 ******************************************************************************/
// Program and Packages
addRewrite@'Program' <| seq(
    visitChild 'body',
    
    when(
        \node -> node.body.type !== 'Package',
        
        globals \ globals ->
        modify \ node ->
            ast_program.Program.create(node.loc,
                concat(
                    createGlobalDeclarations(globals),
                    node.body))));

addRewrite@'Package' <| seq(
    visitChild 'body',
    
    globals \ globals ->
    modify \ node ->
        modifyNode(node, {
            'body': ?node.body.type === 'WithStatement'
                :ast_statement.WithStatement.create(node.body.loc,
                    node.body.bindings,
                    ast_statement.BlockStatement.create(null,
                        concat(
                          createGlobalDeclarations(globals),
                          node.body.body.body)))
                :concat(
                    createGlobalDeclarations(globals),
                    node.body)
        }, {}));

// Clause
addRewrite@'SwitchCase' <| seq(
    visitChild 'test',
    visitChild 'consequent');

addRewrite@'CatchClause' <| seq(
    visitChild 'param',
    visitChild 'body');

// Declarations
addRewrite@'VariableDeclaration' <|
    visitChild 'declarations';

/**
 * Register constants bound in immutable variable declarations.
 * 
 * This also removes the declarations since it will be unused, unless it is the
 * only declaration of a var bound immutable to itself.
 */
addRewrite@'VariableDeclarator' <| seq(
    visitChild 'init',
    
    when(
        \node -> node.init,
        
        extract \ node ->
            ?node.immutable
                :seq(
                    addBindingForNode(node.id, node.init),
                    tryPrune(node.id))
                :addWorking(
                    getUid(node.id),
                    node.init,
                    (isPrimitive node.init || isIdentifier node.init || isLambda node.init))));

/**
 * Register constants bound in immutable variable declarations.
 * 
 * This also removes the declarations since it will be unused, unless it is the
 * only declaration of a var bound immutable to itself.
 */
addRewrite@'Binding' <| seq(
    visitChild 'value',
    
    /**
     * Register bound values.
     */
    when(
        \node ->
            (  node.pattern.type === 'IdentifierPattern'
            && getUid node.pattern.id),
        
        extract \ node ->
            seq(
                addBindingForNode(node.pattern.id, node.value),
                tryPrune(node.pattern.id))),
    
    /**
     * Expand a binding of a let expression to a set of bindings, with the top level
     * binding to the let body last.
     */
    when(
        \node ->
            (node && node.type === 'Binding' && node.value && node.value.type === 'LetExpression'),
        
        extract \ node -> let
            bindings =
                fun.flatten <| concat(
                   node.value.bindings,
                   ast_declaration.Binding.create(null,
                       node.pattern,
                       node.value.body))
       in
           seq(
               set bindings,
               visitChild(bindings.length - 1))));

// Statement
addRewrite@'BlockStatement' <|
    visitChild 'body';

addRewrite@'ExpressionStatement' <|
    visitChild 'expression';

addRewrite@'WithStatement' <|
     seq(
        visitChild 'bindings',
        visitChild 'body');

addRewrite@'SwitchStatement' <|
    seq(
        visitChild 'discriminant',
        visitChild 'cases');

addRewrite@['ReturnStatement', 'ThrowStatement'] <|
    visitChild 'argument';

addRewrite@'TryStatement' <|
    seq(
        visitChild 'block',
        visitChild 'handler',
        visitChild 'finalizer');

addRewrite@'WhileStatement' <|
    block(
        visitChild 'test',
        visitChild 'body');

addRewrite@'DoWhileStatement' <|
    block(
        visitChild 'body',
        visitChild 'test');

addRewrite@'ForStatement' <|
    seq(
        visitChild 'init',
        block(
            visitChild 'test',
            visitChild 'update',
            visitChild 'body'));

// Expression
addRewrite@'FunctionExpression' <|
    block(
        visitChild 'id',
        visitChild 'params',
        visitChild 'body');

addRewrite@'UnaryExpression' <| let
    arithmetic = {
        '!': (!),
        '~': (~),
        'typeof': (typeof),
        '++': (++),
        '--': (--)}
in seq(
    visitChild 'argument',
    
    /**
     * Combine simple unary operations on primitive literals
     */
    when(
        \{operator argument} ->
            (  arithmetic.(operator)
            && isPrimitive(argument)),
    
        modify \ node#{operator argument} -> let
            value = arithmetic.(operator)(argument.value)
        in
            ast_value.Literal.create(node.loc, typeof value, value)));

addRewrite@'AssignmentExpression' <| seq(
    visitChild 'right',
    
    /**
     * Update the working value of a binding.
     */
    when(
        \{left} ->
            left.type === 'Identifier',
        
        extract \ {operator left right} ->
            ?operator === '='
                :addWorking(getUid left, right)
                :addBindingForNode(left, right)));

/**
 * Combine binary arithmetic operations on primitive literals.
 * 
 * TODO: Shortcircuit expansion for logical ops.
 */
addRewrite@['LogicalExpression', 'BinaryExpression'] <| let
    arithmetic = {
        '+': (+),
        '-': (-),
        '*': (*),
        '/': (/),
        '%': (%),
        '<<': (<<),
        '>>': (>>),
        '>>>': (>>>),
        '<': (<),
        '>': (>),
        '<=': (<=),
        '>=': (>=),
        '||': (||),
        '&&': (&&)}
in
    seq(
        visitChild 'left',
        visitChild 'right',
        when(
            \{operator left right} ->
                (  arithmetic.(operator)
                && isPrimitive(left)
                && isPrimitive(right)),
            
            modify \ {operator left right} -> let
                value = arithmetic.(operator)(left.value, right.value)
            in
                ast_value.Literal.create(null, typeof value, value)));

addRewrite@['ConditionalExpression', 'IfStatement'] <| seq(
    visitChild 'test',
    
    /**
     * Reduce conditionals with constant test.
     */
    when(
        \node ->
            isPrimitive node.test,
        
        extract \ {test consequent alternate} ->
            seq(
                set ?isTruthy test : consequent : alternate,
                checkTop),
        
        seq(
            visitChild 'consequent',
            visitChild 'alternate')));

addRewrite@'MemberExpression' <| seq(
    visitChild 'object',
    when(
        \node ->
            node.computed,
        visitChild 'property'),
    
    /**
     * Constant index in array expression.
     */
    when(
        \node ->
            (  node.computed
            && node.object.type === 'ArrayExpression'
            && isNumberish node.property),
    
        modify \ {object property} ->
            object.elements.(property.value) || ast_value.Identifier.create(null, 'undefined')),
       
    /**
     * Length of array expression.
     */
    when(
        \node ->
            (  node.type === 'MemberExpression'
            && node.object.type === 'ArrayExpression'
            && (  (!node.computed && node.property.name === 'length')
               || (node.computed && node.property.type === 'Literal' && node.property.value === 'length'))),
    
        modify \ {object} ->
            ast_value.Literal.create(null, 'number', object.elements.length)),
        
    /**
     * Constant index in string expression.
     */
    when(
        \node ->
            (  node.computed
            && (node.object.type === 'Literal' && node.object.kind === 'string')
            && isNumberish node.property),
    
        modify \ node -> let
            str = node.object.value,
            idx = node.property.value
        in
            ?idx < str.length
                :ast_value.Literal.create(null, 'string', str.(idx))
                :ast_value.Identifier.create(null, 'undefined')));

addRewrite@'NewExpression' <|
    seq(
        visitChild 'callee',
        visitChild 'args');

addRewrite@'CallExpression' <| seq(
    visitChild 'callee',
    visitChild 'args',
    
    /**
     * Expand callee.
     */
    when(
        \node ->
            isExpansion(node.callee),
        
        expand(
            M.node.map \ node -> node.callee,
            \callee ->
                modify \ node ->
                    incCount(
                        getUid(node.callee),
                        getExpansion(node.callee).count || 1,
                        getExpansion(node.callee).countvalue,
                        ast_expression.CallExpression.create(node.loc,
                            callee,
                            node.args)))),

    /**
     * Inline calls of lambda functions by expanding them to let expressions.
     * 
     * The let expression is then rewritten to ensure the resulting values are unique.
     */
    when(
        \node ->
            (  isLambda(node.callee)
            || (node.callee.type === 'LetExpression' && isLambda(node.callee.body))),
        
            seq(
                unique \ uid ->
                modify \ node ->
                    expandCallee(uid, node.callee, node.args),
                checkTop)));

addRewrite@'CurryExpression' <| seq(
    visitChild 'base',
    visitChild 'args',
    
    /**
     * Expand Curry Base
     */
    when(
        \node ->
            (isExpansion(node.base)),
        
        expand(
            M.node.map \ node -> node.base,
            \base ->
                modify \ node ->
                    incCount(
                        getUid(node.base),
                        getExpansion(node.base),
                        getExpansion(node.base).value,
                        ast_expression.CurryExpression.create(node.loc,
                            base,
                            node.args)))),
    
    /**
     * Convert curry on function to let binding of curried args with function body.
     * 
     * Discards arguments that are not used.
     */
    when(
        \node ->
            (  isLambda(node.base)
            || (node.base.type === 'LetExpression' && isLambda(node.base.body))),
        
        seq(
            unique \ uid ->
            modify \ node ->
                expandCurry(uid, node.base, node.args),
            checkTop)));

addRewrite@'LetExpression' <| seq(
    visitChild 'bindings',
    visitChild 'body',
    
    /**
     * Flatten let expression bindings.
     */
    modify \ {loc bindings body} ->
        ast_expression.LetExpression.create(loc,
            flattenr(bindings),
            body),
    /**
     * Collapse empty let expressions.
     */
    when(
        \{bindings} ->
            !bindings.length,
        
        modify \ {body} ->
            body));

// Pattern
addRewrite@'ArgumentsPattern' <| seq(
    visitChild 'id',
    visitChild 'elements',
    visitChild 'self');

addRewrite@'IdentifierPattern' <|
    extract \ node ->
        addBinding(getUid node.id, null, true);

// Value
addRewrite@'ArrayExpression' <|
    visitChild 'elements';

addRewrite@'ObjectExpression' <|
    visitChild 'properties';

addRewrite@'ObjectValue' <|
    visitChild 'value';

addRewrite@'Identifier' <|
    when(
        \node ->
            (  getUid node
            && !isExpansion node),
        
        /**
         * Replace identifier with simple values.
         */
        extract \ node ->
            getBinding(getUid node).chain \ binding ->
                ?binding && binding.value && binding.simple
                    :set(binding.value)
                    :pass);

/* Interface
 ******************************************************************************/
_check = \node -> {
    if (Array.isArray(node)) {
        if (!node.length)
            return pass;
        
        return seq(
            down,
            seqa(node.map(\_ i -> 
                ?i === node.length - 1
                    :checkTop
                    :next(checkTop, right))),
            up);
    }
    
    if (node instanceof Node && peepholes.(node.type))
        return peepholes.(node.type);
    
    return pass;
};

var initialState = fun.foldl(
    \s name -> let
        id = builtins.(name),
        def = definitions.(name)
    in
        s.addBinding(getUid id, markExpansion(id, 0, def), true),
    State.empty,
    Object.keys(builtins));

/**
 * 
 */
optimize = \ast data ->
    run(
        next(
            checkTop,
            extract \ node ->
            globals \ g ->
            unique \ unique ->
                M.of({
                    'tree': node,
                    'data': {'globals': g, 'unique': unique}
                })),
        khepriZipper(ast),
        initialState,
        data.unique);

}