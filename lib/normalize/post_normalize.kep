/**
 * @fileOverview Post-lexical check tree normalization.
 * 
 * Rewrites complex Khepri statements to simplified forms in restricted Khepri.
 * Restrict form code can be better optimized and transformed by later stages.
 */
package (
    normalize)
with
    import 'khepri-ast::node' {modify setUserData},
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::statement' ast_statement,
    import 'khepri-ast::value' ast_value,

    import '../pseudo/pattern' {
        Import},
    import '../ast' {
        type
        isBlockFunction
        setUd
        setUid
        getUid},
    import '../fun' {
        concat
        flattenr
        map},
    import '../rewriter' {
        UP
        DOWN
        Rewriter
        rewrite},
    import '../user_operator' {opToName},
    import './unpack' {
        innerPattern
        unpackParameters
        getParameterNames}
in {

var markReserved := setUd @ 'reserved' @ true;

var isUserOp := getUid;

/* Transforms
 ******************************************************************************/
var peepholes = new Rewriter();

var always := \_ -> true;

/* Binding Expansion
 ******************************************************************************/
/**
 * Expand an import pattern to an import.
 * 
 * Imports are marked reserved so they will not be pruned.
 */
peepholes.add('ImportPattern', UP,
    always,
    
    \{pattern from#{value}} -> let
        [imp ...rest] =
            innerPattern(
                Import.create(null, value),
                pattern)
    in
        concat(
            markReserved imp,
            rest));

/**
 * Expand a potentially complex bindings pattern to a list of simple
 * identifier bindings.
 */
peepholes.add('Binding', UP,
    always,
    
    \binding ->
        innerPattern(
            binding.value,
            binding.pattern));

/**
 * Flatten previously expanded binding lists.
 */
peepholes.add(['LetExpression', 'WithStatement'], UP,
    always,
    
    \node ->
        modify @ node {
            bindings: flattenr node.bindings
        });

/**
 * Expand potentially complex parameter patterns in a function to simple
 * identifier patterns for the arguments with a binding body to unpack
 * complex parameter binding values.
 */
peepholes.add('FunctionExpression', UP,
    always,
    
    \node -> let
        params = getParameterNames(node.params.elements),
        
        bindings = unpackParameters(node.params.id, node.params.elements),
        
        body = ?isBlockFunction node
            :ast_statement.BlockStatement.create(null,
                [ast_statement.WithStatement.create(null,
                    bindings,
                    node.body)])
             
            :ast_expression.LetExpression.create(null,
                bindings,
                node.body)
    in
        modify @ node {
            params: modify(node.params, { elements: params }),
            body: body
        });

/* User Operator Conversion
 ******************************************************************************/
var opToIdentifier := \node ->
    setUserData(
        ast_value.Identifier.create(node.loc,
            opToName node.name),
        node.ud);

/**
 * Rewrite user defined operators to identifiers.
 */
peepholes.add(['UnaryOperator', 'BinaryOperator'], DOWN,
    isUserOp,
    
    opToIdentifier);

/**
 * Rewrite binary expressions with user defined ops to a function call.
 */
peepholes.add('BinaryExpression', DOWN,
    .operator \> isUserOp,
    
    \{loc operator left right} ->
        ast_expression.CallExpression.create(loc,
            opToIdentifier operator,
            [left, right]));

/**
 * Rewrite non user defined binary expressions to use op name instead of node for
 * operator property.
 */
peepholes.add(['BinaryExpression', 'UnaryExpression'], DOWN,
    .operator \> isUserOp \> (!),
    
    \node#{operator} ->
        modify(node, { operator: operator.name }));

/**
 * Rewrite unary expressions with user defined op to a function call.
 */
peepholes.add('UnaryExpression', DOWN,
     .operator \> isUserOp,
    
    \{loc operator argument} ->
        ast_expression.CallExpression.create(loc,
            opToIdentifier operator,
            [argument]));

/* Expression Conversion
 ******************************************************************************/
/**
 * Expand an assignment expression to a list of single assignments.
 */
var expandAssignment := \node ->
    ?type node.right === 'AssignmentExpression'
        :let right = expandAssignment(node.right) in
            concat(
                right,
                ast_expression.AssignmentExpression.create(null,
                    node.left,
                    right.(right.length - 1).left))
        :[node];

/**
 * Rewrite a potentially compound assignment expression to a list of single
 * assignments in a block.
 */
peepholes.add('ExpressionStatement', UP,
    .expression \> type \> (=== 'AssignmentExpression'),
    
    .expression
        \> expandAssignment
        \> flattenr
        \> map @ (ast_statement.ExpressionStatement.create @ null)
        \> ast_statement.BlockStatement.create @ null);

/* Interface
 ******************************************************************************/
/**
 * Post normalize a Khepri AST.
 * 
 * @param ast Zippered Khepri AST.
 */
normalize = rewrite @ peepholes;

}