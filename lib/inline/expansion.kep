/**
 * @fileOverview Structure that tracks inline expansions.
 */
package (
    getExpansion
    isExpansion
    getExpansionDepth
    getExpansionValue
    setExpansion
    deleteExpansion
    
    canExpand
    markExpansion
    incrementCount
    
    mergeExpansions
    expandNode)
with
    import 'bes::record' record,
    
    import '../ast' {
        getUd
        setUd}
in {
/**
 * Maximum depth that to expand recursion to.
 */
var MAX_EXPANSION_DEPTH := 1;

/* Record
 ******************************************************************************/
/**
 * Expansion cell.
 * 
 * @member count Current expansion depth.
 * @member value Value that will be expanded.
 */
var Expansion := record.declare(null, [
    'count',
    'value']);

/* Primitive ops
 ******************************************************************************/
/**
 * Get expansion data on a node.
 */
getExpansion := getUd @ 'expand';

/**
 * Does a node have expansion data?
 */
isExpansion := getExpansion;

/**
 * Get the depth of the expansion on a node.
 * 
 * Returns 0 if none.
 */
getExpansionDepth := \node ->
    let exp = getExpansion node in ?exp : exp.count : 0;

/**
 * Get the expansion value on a node.
 * 
 * Returns null if none.
 */
getExpansionValue := getExpansion \> (_ ?? .value);

/**
 * Set expansion data on a node.
 */
setExpansion := setUd @ 'expand';

/**
 * Remove expansion data on a node.
 */
deleteExpansion := setExpansion @ null;

/* Compound Ops
 ******************************************************************************/
/**
 * Can a node be expanded based on its expansion data?
 */
canExpand := \node ->
    isExpansion node && getExpansionValue node < MAX_EXPANSION_DEPTH;

/**
 * Mark `node` as an expansion.
 * 
 * @param node AST node.
 * @param count Number of times node has been expanded.
 * @param target Expansion value.
 */
markExpansion := \node count value ->
    ?isExpansion value
        :setExpansion(getExpansion value, node)
        :setExpansion(
            Expansion.create(
                Math.max(
                    count,
                    getExpansionDepth node),
                value),
            node);

mergeExpansions := \val other ->
    ?isExpansion other && isExpansion val
        :setExpansion(
            Expansion.create(
                Math.max(
                    getExpansionDepth val,
                    getExpansionDepth other),
                getExpansion(val).value),
            val)
        :val;

/**
 * 
 */
incrementCount := \node count value ->
    markExpansion(
        node,
        (getExpansionDepth node || count) + 1,
        value);

/**
 * Try to expand `node`.
 */
expandNode := \node ->
    ?isExpansion node
        :?canExpand node
            :getExpansionValue node
            :deleteExpansion node
        :node;

}