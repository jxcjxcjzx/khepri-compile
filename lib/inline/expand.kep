package (
    expandCallee
    expandCurry)
with
    import 'khepri-ast::declaration' ast_declaration,
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::pattern' ast_pattern,
    import 'khepri-ast::value' ast_value,
    import 'khepri-ast::node' {setData modify},

    import '../ast' {
        getUid
        tryGetUd},
    import '../fun' {
        concat
        map},
    import './rename' {rename},
    import '../builtin' {builtins}
in{

var getLocals := tryGetUd@([], 'locals');

/**
 * Convert the elements of an argument unpack object to a set of bindings.
 */
var argsToBindings := \uid parameters args closure ->
    map(
        \x i ->
            ast_declaration.Binding.create(null,
                rename(uid, closure, x),
                (args.(i) || builtins.undefined)),
        parameters.elements);

/**
 * Convert the arguments unpack of an arguments unpack to a binding.
 */
var argsBinding := \uid arg bindings args closure ->
    ast_declaration.Binding.create(null,
        rename(uid, closure, arg),
        ast_expression.ArrayExpression.create(null,
            args.map \ x i ->
                ?bindings.(i)
                    :bindings.(i).pattern.id
                    :x));

/* Interface
 ******************************************************************************/
/**
 * Expand a call of a lambda expression of let expression with lambda body
 * to a let expression.
 */
expandCallee = \uid callee args -> let
    target = ?callee.type === 'LetExpression' : callee.body : callee,
    
    closure = getLocals target,
    
    bindings = argsToBindings(uid, target.params, args, closure),
    
    argBinding = ?target.params.id
        :argsBinding(uid, target.params.id, bindings, args, closure)
        :[],
    
    bindings = concat(
        ?callee.bindings
            :rename(uid, closure, callee.bindings)
            :[],
        bindings,
        argBinding)
in
    ast_expression.LetExpression.create(null,
        bindings,
        rename(uid, closure, target.body));

/**
 * Expand a curry of a lambda expression of let expression with curry body
 * to a let expression.
 */
expandCurry = \uid base args -> let
    target = ?base.type === 'LetExpression' : base.body : base
in
    ?!target.params.elements.length
        :base
    :let
        first = target.params.elements.(0),
        rest = target.params.elements.slice(1),
        
        closure = getLocals target,
        
        body = modify(target, {
            id: null,
            params: ast_pattern.ArgumentsPattern.create(null, null,
                rename(uid, closure, rest),
                target.params.self),
            body: rename(uid, closure, target.body)
        })
    in
        ?first && (first.type === 'IdentifierPattern' || first.type === 'AsPattern' || first.type === 'ObjectPattern')
            :ast_expression.LetExpression.create(null,
                concat(
                    base.bindings,
                    ast_declaration.Binding.create(null,
                        rename(uid, closure, first),
                        args.(0))),
                body)
            :body;

}