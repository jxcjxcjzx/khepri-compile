package (
    rename
    incCount
    getLocals)
with
    import 'khepri-ast-zipper' {khepriZipper},
    import 'neith::walk' {preWalk},

    import 'neith::tree' tree,
    
    import 'khepri-ast::node' {setData modify},
    
    import '../fun' {
        contains},
    import '../ast' {
        type
        tryGetUd
        getUd
        setUd
        getUid
        setUid
        'getLocals'#getNodeLocals},
    import './closure' {
        updateClosure},
    import './expansion' {
        incrementCount}
in {

var prefixUid := \prefix uid ->
    prefix + '-' + uid;

var prefixClosure = \node prefix list -> 
    updateClosure((prefixUid @ prefix), node, list);

getLocals := \node prefix ->
     getNodeLocals(node).map(prefixUid @ prefix);

/*
 ******************************************************************************/
/**
 * Rename all identifier instances in an AST.
 * 
 * @param prefix Unique id to prefix to all renamed identifiers.
 * @param list List of identifier uids to rename. All others will be ignored
 * @param root Root node of tree to traverse.
 */ 
rename = \prefix list root ->
    tree.node <| preWalk(
        \ctx -> let
            node = tree.node(ctx),
            uid = getUid node
        in
            ?contains(list, uid)
                :tree.setNode(
                    setUid(prefixUid(prefix, uid), node),
                    ctx)
            
            :?type node === 'FunctionExpression'
                :tree.setNode(
                    prefixClosure(node, prefix, list),
                    ctx)
            
            :ctx,
        khepriZipper root);

/**
 * 
 */
incCount = \target count value root ->
    tree.node <| preWalk(
        \ctx -> let
            node = tree.node(ctx),
            uid = getUid node
        in
            ?target === uid
                :tree.setNode(
                    incrementCount(node, count, value),
                    ctx)
                :ctx,
        khepriZipper root);

}
