/**
 * @fileOverview Khepri inlining.
 * 
 * This stage does the following:
 * - Replace operators converted to functions with references to a global.
 * - Add globals to programs and packages.
 * - Propagate constant values, replacing identifiers with values.
 * - Fold constant subexpressions.
 * - Potentially inline functions.
 * - Rewrite curries and calls of inlined forms to let expressions.
 */
package (
    optimize)
with
    import 'khepri-ast::node' {'modify': modifyNode},
    import 'khepri-ast::declaration' ast_declaration,
    import 'khepri-ast::statement' ast_statement,
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::value' ast_value,
    
    import 'akh::base' {
        next
        'sequence': seq
        'sequencea': seqa},
    
    import 'akh::unique' Unique,
    import 'akh::trans::state' StateT,

    import 'zipper-m::trans::tree' TreeZipperT,
    
    import '../ast' ast#{
        type
        isIdentifier
        getUid
        isLambda
        isLambdaWithoutArgs
        isPrimitive
        isString
        isNumberish
        isTruthy},
    import '../builtin' builtin#{builtins definitions},
    import '../fun' {
        flattenr
        flatten
        foldl
        concat
        map
        range},
    
    import './state' state#{State},
    import './expand' {
        expandCallee
        expandCurry},
    import './expansion' {
        markExpansion
        mergeExpansions
        getExpansion
        getExpansionDepth
        getExpansionValue
        isExpansion
        expandNode},
    import './rename' {
        rename
        incCount}
in {

var SIMPLE = true;
var COMPLEX = false;

/* Forward
 ******************************************************************************/
var _check;

/* Monad
 ******************************************************************************/
var M = TreeZipperT (StateT Unique);

var run = \c ctx state seed ->
    Unique.runUnique(
        StateT.evalStateT(
            TreeZipperT.runTreeZipperT(c, ctx),
            state),
        seed);

var pass = M.of null;

var unique = M.chain @ (M.liftInner (Unique.unique));

// State Operations
////////////////////////////////////////
var getState := M.lift (M.inner.get);

var modifyState := M.lift <\ M.inner.modify;

// Movement
////////////////////////////////////////
var extractCtx = M.get;

var extract = M.chain @ M.node;

var modify = M.modifyNode;
var set = M.setNode;

var up = M.up;
var down = M.down;
var right = M.right;

var moveChild =  M.child;

// Expansion
////////////////////////////////////////
/**
 * Expand the value from `exp`, passing result to `f`.
 */
var expand := \exp f ->
    exp.chain(expandNode \> f);

// Bindings Operations
////////////////////////////////////////
/**
 * Register an immutable binding.
 * 
 * Immutable bindings are shared across blocks.
 * 
 * @param uid Immutable binding unique id.
 * @param value Value bound.
 */
var addBinding := \uid value simple ->
    modifyState (state.addBinding @ uid @ value @ simple);

/**
 * Set the working value of a binding.
 * 
 * The working value is the value of a (perhaps mutable) binding at a point in
 * execution.
 * 
 * @param uid Identifier unique id.
 * @param value Value bound.
 */
var addWorking := \uid value simple ->
    modifyState (state.addWorking @ uid @ value @ simple);

/**
 * Invalidate a working binding.
 * 
 * @param uid Identifier unique id.
 */
var invalidateWorking := \uid ->
    modifyState (state.invalidateWorking @ uid);

/**
 * Get the value of the current binding for `uid`.
 * 
 * Prefers working bindings over immutable bindings.
 * 
 * @param uid Identifier unique id.
 */
var getBinding := \uid -> 
    ?uid
        :getState.map (state.getBinding @ uid)
        :pass;

/**
 * 
 */
var tryPrune := \id ->
    let uid = getUid id in
        getBinding(uid).chain \ binding ->
            ?binding && binding.simple && !isExpansion binding.value && (isPrimitive binding.value || (binding.immutable && isIdentifier binding.value))
                :set []
                :pass;

// Scoping operations
////////////////////////////////////////
/**
 * Enter a new scoping block.
 */
var push := modifyState (state.push);

/**
 * Exit the current the current scoping block.
 */
var pop := modifyState (state.pop);

/**
 * Evaluate `body` in a new scoping block.
 */
var block := \-body(...)->
    seq(
        push,
        seqa body,
        pop);

// Globals Operations
////////////////////////////////////////
/**
 * Get globals.
 */
var globals := M.chain @ (getState.map (state.getGlobals));

/**
 * Add a new global.
 */
var addGlobal := \name ->
    modifyState (state.addGlobal @ name);

/**
 * 
 */
var createGlobalDeclarations = \g ->
    ast_declaration.VariableDeclaration.create(null,
        g.map \ x ->
            ast_declaration.VariableDeclarator.create(null,
                builtins.(x),
                definitions.(x)));

// Locals Operations
////////////////////////////////////////
var getLocals := getState.map(state.getLocals);

var pushLocals := modifyState (state.pushLocals);

var popLocals := modifyState (state.popLocals);

var addLocals := \locals -> modifyState (state.addLocals @ locals);

/*
 ******************************************************************************/
/**
 * Move to a child along `edge` and perform a list of operations. Return to parent.
 */
var child = \edge ...ops ->
    seq(
        moveChild edge,
        seqa ops,
        up);

/**
 * Rewrite the current node.
 */
var checkTop = extract \ x -> { return _check x; }; // forward

/**
 * Rewrite a child node.
 */
var visitChild = \edge ->
    child(edge,
        checkTop);

/**
 * When `test` is true for current node, evaluate consequent. Otherwise evalaute
 * alternate.
 */
var when = \test consequent alternate ->
    extract \ node ->
        ?test node
            :consequent
            :(alternate || pass);

/*
 ******************************************************************************/
var getBindingType = \id value ->
    ?isPrimitive value
        :M.of [SIMPLE, value]
    
    :?isLambda value
        :M.of [SIMPLE, markExpansion(id, 0, value)]
    
    :?isIdentifier value
        :getBinding(getUid value).chain \ binding ->
            ?binding && binding.immutable
                :M.of [SIMPLE,
                    ?binding.simple && binding.value
                        :mergeExpansions(binding.value, value)
                        :value]
            
            :M.of [SIMPLE, value]
    
    :M.of [COMPLEX, value];

/**
 * Register an immutable binding of node `id` to `value`.
 */
var addBindingForNode = \id value ->
    getBindingType(id, value).chain \ [kind value] ->
        addBinding(getUid id, value, kind);

/**
 * Register a working binding of node `id` to `value`.
 */
var addWorkingForNode = \id value ->
    getBindingType(id, value).chain \ [kind value] ->
        addWorking(getUid id, value, kind);

/**
 * Set the working for node `id` to `value`.
 * 
 * If a binding does not already exist, invalidate it.
 */
var setWorkingForNode = \id value -> 
    let
        uid = getUid id
    in
        getBinding(uid).chain \ binding ->
            ?binding
                :addWorkingForNode(id, value)
                :invalidateWorking uid;

/*
 ******************************************************************************/
var peepholes = {};

var addRewrite = \type f -> {
    if (Array.isArray type)
        type.forEach \ type -> addRewrite(type, f);
    else
        peepholes.(type) = f;
};

/* Operator To Function
 ******************************************************************************/
/**
 * Convert Unary Op Expression to function.
 */
addRewrite@'UnaryOperator' <| seq(
    extract \ {name} -> seq(
        addGlobal(name),
        set <| builtins.(name)),
    checkTop);

/**
 * Convert binary op expression to function.
 */
addRewrite@'BinaryOperator' <| seq(
    extract \ {name} -> seq(
        addGlobal(name),
        set <| builtins.(name)),
    checkTop);

/**
 * Convert ternary op expression to function.
 */
addRewrite@'TernaryOperator' <| seq(
    addGlobal('?'),
    set <| builtins.('?'),
    checkTop);

/**
 * Convert expressions to functions.
 */
addRewrite@'OperatorExpression' <| seq(
    when(
        \{operator} ->
            (  type operator === 'MemberExpression'
            || type operator === 'CallExpression'),
        
        // Must be a dot expression
        // This is really more of a macro, so it is handled differently
        unique \ uid ->
        modify \ {operator} ->
            builtin.member(operator, uid),
        
        // Otherwise, normal op
        seq(
            visitChild 'operator',
            when(.flipped,
                modify \ {operator} ->
                    ast_expression.CallExpression.create(null,
                        builtins.('_'),
                        [operator]),
                        
                modify (.operator)))),
    
    checkTop);

/* 
 ******************************************************************************/
// Program and Packages
addRewrite@'Program' <| seq(
    visitChild 'body',
    
    when(
        .body \> type \> (!== 'Package'),
        
        globals \ globals ->
        modify \ node ->
            modifyNode @ node {
                'body': concat(
                    createGlobalDeclarations(globals),
                    node.body)
            }));

addRewrite@'Package' <| seq(
    visitChild 'body',
    
    globals \ globals ->
    modify \ node#{body} ->
        modifyNode @ node {
            'body': ?type body === 'WithStatement'
                :modifyNode @ body {
                    'body': ast_statement.BlockStatement.create(null,
                        concat(
                            createGlobalDeclarations(globals),
                            body.body.body))
                }
                :concat(
                    createGlobalDeclarations(globals),
                    body)
        });

// Clause
addRewrite@'SwitchCase' <| seq(
    visitChild 'test',
    visitChild 'consequent');

addRewrite@'CatchClause' <| seq(
    visitChild 'param',
    visitChild 'body');

// Declarations
addRewrite@'VariableDeclaration' <|
    visitChild 'declarations';

/**
 * Register constants bound in immutable variable declarations.
 * 
 * This also removes the declarations since it will be unused, unless it is the
 * only declaration of a var bound immutable to itself.
 */
addRewrite@'VariableDeclarator' <| seq(
    visitChild 'init',
    
    when(.init,
        extract \ {immutable id init} ->
            ?immutable
                :seq(
                    addBindingForNode(id, init),
                    tryPrune id)
                :addWorkingForNode(id, init),
        extract \ {id} ->
            addWorkingForNode(id, builtins.undefined)));

/**
 * Register constants bound in immutable variable declarations.
 * 
 * This also removes the declarations since it will be unused, unless it is the
 * only declaration of a var bound immutable to itself.
 */
addRewrite@'Binding' <| seq(
    visitChild 'value',
    
    /**
     * Register bound values.
     */
    when(
        \{pattern} ->
            (  type pattern === 'IdentifierPattern'
            && getUid pattern.id),
        
        extract \ {pattern value} -> seq(
            addBindingForNode(pattern.id, value),
            tryPrune(pattern.id))),
    
    /**
     * Expand a binding of a let expression to a set of bindings, with the top level
     * binding to the let body last.
     */
    when(
        \node ->
            (type node === 'Binding' && type node.value === 'LetExpression'),
        
        extract \ node -> let
            bindings =
                flatten <| concat(
                   node.value.bindings,
                   ast_declaration.Binding.create(null,
                       node.pattern,
                       node.value.body))
       in seq(
           set bindings,
           visitChild(bindings.length - 1))));

// Statement
addRewrite@'BlockStatement' <|
    visitChild 'body';

addRewrite@'ExpressionStatement' <|
    visitChild 'expression';

addRewrite@'WithStatement' <| seq(
    visitChild 'bindings',
    visitChild 'body');

addRewrite@'SwitchStatement' <| seq(
    visitChild 'discriminant',
    visitChild 'cases');

addRewrite@['ReturnStatement', 'ThrowStatement'] <|
    visitChild 'argument';

addRewrite@'TryStatement' <| seq(
    visitChild 'block',
    visitChild 'handler',
    visitChild 'finalizer');

addRewrite@'WhileStatement' <|
    block(
        visitChild 'test',
        visitChild 'body');

addRewrite@'DoWhileStatement' <|
    block(
        visitChild 'body',
        visitChild 'test');

addRewrite@'ForStatement' <| seq(
    visitChild 'init',
    block(
        visitChild 'test',
        visitChild 'update',
        visitChild 'body'));

// Expression
addRewrite@'FunctionExpression' <|
    block(
        pushLocals,
        visitChild 'id',
        visitChild 'params',
        visitChild 'body',
        getLocals.chain \ locals ->
        modify \ node ->
            ast.setLocals(
                concat(ast.getLocals node, locals),
                node),
        popLocals);

addRewrite@'UnaryExpression' <| let
    arithmetic = {
        '!': (!),
        '~': (~),
        'typeof': (typeof),
        '++': (++),
        '--': (--)}
in seq(
    visitChild 'argument',
    
    /**
     * Combine simple unary operations on primitive literals
     */
    when(
        \{operator argument} ->
            (  arithmetic.(operator)
            && isPrimitive argument),
    
        modify \ {loc operator argument} -> let
            value = arithmetic.(operator)(argument.value)
        in
            ast_value.Literal.create(loc, typeof value, value)));

addRewrite@'BinaryExpression' <| let
    arithmetic = {
        '+': (+),
        '-': (-),
        '*': (*),
        '/': (/),
        '%': (%),
        '<<': (<<),
        '>>': (>>),
        '>>>': (>>>),
        '==': (==),
        '!=': (!=),
        '===': (===),
        '!==': (!==),
        '<': (<),
        '>': (>),
        '<=': (<=),
        '>=': (>=),
        '|': (|),
        '&': (&),
        '^': (^),
        '&&': (&&),
        '||': (||)}
in seq(
    visitChild 'left',
    visitChild 'right',
    
    /**
     * Combine binary arithmetic operations on primitive literals.
     * 
     * TODO: Shortcircuit expansion for logical ops.
     */
    when(
        \{operator left right} ->
            (  arithmetic.(operator)
            && isPrimitive left
            && isPrimitive right),
        
        modify \ {operator left right} -> let
            value = arithmetic.(operator)(left.value, right.value)
        in
            ast_value.Literal.create(null, typeof value, value)),
    
    /**
     * Rewrite binary functions to use builtins.
     * 
     * @TODO: move this out of this stage.
     */
    when(
        \{operator} ->
            (  operator === '\\>'
            || operator === '\\>>'
            || operator === '<\\'
            || operator === '<<\\'
            || operator === '??'
            || operator === '<|'
            || operator === '|>'
            || operator === '<<|'
            || operator === '|>>'),
        
        extract \ {operator left right} -> seq(
            addGlobal(operator),
            set <| ast_expression.CallExpression.create(null,
                builtins.(operator),
                [left, right]),
            checkTop)));

addRewrite@'AssignmentExpression' <| seq(
    visitChild 'right',
    
    /**
     * Update the working value of a binding.
     */
    when(.left \> type \> (=== 'Identifier'),
        extract \ {immutable left right} ->
            ?immutable
                :addBindingForNode(left, right)
                :setWorkingForNode(left, right)));

addRewrite@'DeleteExpression' <|
    visitChild 'argument';

addRewrite@['ConditionalExpression', 'IfStatement'] <| seq(
    visitChild 'test',
    
    /**
     * Reduce conditional with constant test.
     */
    when(.test \> isPrimitive,
        
        extract \ {test consequent alternate} -> seq(
            set ?isTruthy test : consequent : alternate,
            checkTop),
        
        seq(
            visitChild 'consequent',
            visitChild 'alternate')));

addRewrite@'CheckedMemberExpression' <| seq(
    visitChild 'object',
    when(.computed,
        visitChild 'property'),
    
    extract \ node -> let
        id = node.id
    in
         getBinding(getUid(node.id)).chain \ binding ->
            ?binding && binding.value && binding.simple
                :set <| modifyNode @ node { id: binding.value }
                :pass);

addRewrite@'MemberExpression' <| seq(
    visitChild 'object',
    when(.computed,
        visitChild 'property'),
    
    /**
     * Constant index in array expression.
     */
    when(
        \node ->
            (  node.computed
            && type node.object === 'ArrayExpression'
            && isNumberish node.property),
    
        modify \ {object property} ->
            object.elements.(property.value) || builtins.undefined),
   
    /**
     * Length of array expression.
     */
    when(
        \node ->
            (  type node === 'MemberExpression'
            && type node.object === 'ArrayExpression'
            && (  (!node.computed && node.property.name === 'length')
               || (node.computed && type node.property === 'Literal' && node.property.value === 'length'))),
    
        modify \ {object} ->
            ast_value.Literal.create(null, 'number', object.elements.length)),
        
    /**
     * Constant index in string expression.
     */
    when(
        \node ->
            (  node.computed
            && isString node.object
            && isNumberish node.property),
    
        modify \ node -> let
            str = node.object.value,
            idx = node.property.value
        in
            ?idx < str.length
                :ast_value.Literal.create(null, 'string', str.(idx))
                :builtins.undefined));

addRewrite@['NewExpression', 'ApplyExpression'] <| seq(
    visitChild 'callee',
    visitChild 'args');

addRewrite@'CallExpression' <| seq(
    visitChild 'callee',
    visitChild 'args',
    
    /**
     * Expand callee.
     */
    when(.callee \> isExpansion,
        
        expand @ (M.node.map (.callee)) \ newCallee ->
            modify \ node#{callee} ->
                incCount(
                    getUid callee,
                    getExpansionDepth callee || 1,
                    getExpansionValue callee,
                    modifyNode @ node { callee: newCallee })),

    /**
     * Inline calls of lambda functions by expanding them to let expressions.
     * 
     * The let expression is then rewritten to ensure the resulting values are unique.
     */
    when(
        \{callee} ->
            (  isLambda callee
            || (type callee === 'LetExpression' && isLambda(callee.body))),
        
            seq(
                unique \ uid ->
                extract \ node -> let
                    [locals node] = expandCallee(uid, node.callee, node.args)
                in
                    seq(
                        addLocals locals,
                        set node),
                checkTop)));

addRewrite@'CurryExpression' <| seq(
    visitChild 'base',
    visitChild 'args',
    
    /**
     * Expand curry callee
     */
    when(.base \> isExpansion,
        
        expand @ (M.node.map (.base)) \ expandedBase ->
            modify \ node#{base} ->
                incCount(
                    getUid base,
                    getExpansion base,
                    getExpansionValue base,
                    modifyNode @ node { 'base': expandedBase })),
    
    /**
     * Convert curry on function to a let binding of curried args with function body.
     * 
     * Discard unused argument.
     */
    when(
        \{base} ->
            (  isLambdaWithoutArgs base
            || (type base === 'LetExpression' && isLambdaWithoutArgs(base.body))),
        
        seq(
            unique \ uid ->
            modify \ node ->
                expandCurry(uid, node.base, node.args),
            checkTop)));

addRewrite@'LetExpression' <| seq(
    visitChild 'bindings',
    visitChild 'body',
    
    /**
     * Flatten let with let body.
     */
    when(.body \> type \> (=== 'LetExpression'),
        modify \ {loc bindings body} ->
            ast_expression.LetExpression.create(loc,
                concat(
                    bindings,
                    body.bindings),
                body.body)),
    
    /**
     * Flatten let expression bindings.
     */
    modify \ node ->
        modifyNode @ node {
            bindings: flattenr node.bindings
        },
    
    /**
     * Collapse empty let expressions.
     */
    when((!) <\ .bindings.length,
        
        modify (.body)));

addRewrite@'SliceUnpack' <| seq(
    visitChild 'target',
    
    /**
     * Inline slices on array expressions.
     */
    when(.target \> getUid,
        extract \ node ->
            getBinding(getUid node.target).chain \ binding ->
                ?binding && binding.value && type binding.value  === 'ArrayExpression'
                    :modify \ {target from to} ->
                        ast_expression.ArrayExpression.create(null,
                            map(
                                \i ->
                                    ast_expression.MemberExpression.create(null,
                                        target,
                                        ast_value.Literal.create(null, 'number', i),
                                        true),
                                range(from, binding.value.elements.length - to)))
                    :pass));

// Pattern
addRewrite@['RelativeUnpack'] <|
    visitChild 'target';

addRewrite@'ArgumentsPattern' <| seq(
    visitChild 'id',
    visitChild 'elements',
    visitChild 'self');

addRewrite@'IdentifierPattern' <|
    extract \ {id} ->
        addBinding(getUid id, null, SIMPLE);

// Values
addRewrite@'ArrayExpression' <|
    visitChild 'elements';

addRewrite@'ObjectExpression' <|
    visitChild 'properties';

addRewrite@'ObjectValue' <|
    visitChild 'value';

addRewrite@'Identifier' <|
    /**
     * Replace identifier with simple values.
     */
    when(
        \node ->
            (getUid node && !isExpansion node),
        
        extract \ node ->
            getBinding(getUid node).chain \ binding ->
                ?binding && binding.value && binding.simple
                    :set(binding.value)
                    :pass);

/* Interface
 ******************************************************************************/
_check = \node -> {
    if (Array.isArray(node)) {
        if (!node.length)
            return pass;
        
        return seq(
            down,
            seqa(node.map(\_ i -> 
                ?i === node.length - 1
                    :checkTop
                    :next(checkTop, right))),
            up);
    }
    
    return (peepholes.(type node) || pass);
};

var inline := seq(
    checkTop,
    extractCtx.chain \ node ->
    unique \ unique ->
        M.of {
            tree: node,
            data: {unique: unique}
        });

var initialState :=
    foldl(
        \s name -> let
            id = builtins.(name),
            def = definitions.(name)
        in
            state.addBinding(
                getUid id,
                markExpansion(id, 0, def),
                SIMPLE,
                s),
        State.empty,
        Object.keys(builtins))
    |> state.addGlobal @ '_';

/**
 * 
 */
optimize = \ast data ->
    run(
        inline,
        ast,
        initialState,
        data.unique);

}