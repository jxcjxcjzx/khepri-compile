/**
 * @fileOverview Inlining state record.
 * 
 * @TODO: split into inlining scope and state.
 */
package (
    State
    
    getBinding
    addBinding
    addWorking
    invalidateWorking
    
    push
    pop
    
    getGlobals
    addGlobal
    
    addLocals
    getLocals
    pushLocals
    popLocals)
with
    import 'bes::record' record,

    import 'hamt' hamt,
    
    import '../fun' {
        concat},
    import './binding' {
        Binding
        MUTABLE
        IMMUTABLE}
in {

/* Record
 ******************************************************************************/
/**
 * Inlining state record.
 * 
 * @member bindings Map of unique ids to immutable bindings.
 * @member bindings Map of unique ids to working values.
 * @member globals List of globals.
 * @member outer Outer state.
 */
State := record.declare(null, [
    'bindings',
    'working',
    'globals',
    'outer',
    'locals']);

State.empty = new State(
    hamt.empty,
    hamt.empty,
    hamt.empty,
    null,
    [[], null]);

var putBinding := \key binding s ->
    s.setBindings(
        hamt.set(key, binding, s.bindings));

var putWorking := \key binding s ->
    s.setWorking(
        hamt.set(key, binding, s.working));

/* Scope Operations
 ******************************************************************************/
/**
 * Enter an new scope.
 * 
 * @param s State.
 */
push = \s ->
    s
        .setOuter(s)
        .setWorking(hamt.empty);

/**
 * Exit the current scope.
 * 
 * @param s State.
 */
pop = let
    nullWorking =
        hamt.fold @ \p {key} ->
            hamt.set(key, null, p)
in
    \s ->
        s.outer
            .setBindings(s.bindings)
            .setGlobals(s.globals)
            .setWorking(
                // Delete working bindings modified in inner from outer scope.
                nullWorking(s.outer.working, s.working));

/* Binding Operations
 ******************************************************************************/
/**
 * Get current binding for `uid`.
 * 
 * @param uid Unique id.
 * @param s State.
 */
getBinding := \uid s -> 
    (  hamt.get(uid, s.bindings)
    || hamt.get(uid, s.working));

/**
 * Add an immutable binding for `uid`.
 * 
 * @param uid Unique id.
 * @param value Bound value.
 * @param simple Is the bound value simple?
 * @param s State.
 */
addBinding = \uid value simple s ->
    putBinding(
        uid,
        Binding.create(value, IMMUTABLE, simple),
        s);

/**
 * Set the working binding for `uid`.
 * 
 * @param uid Unique id.
 * @param value Bound value.
 * @param simple Is the bound value simple?
 * @param s State.
 */
addWorking = \uid value simple s ->
    putWorking(
        uid,
        Binding.create(value, MUTABLE, simple),
        s);

/**
 * Invalidate the working binding for `uid`.
 * 
 * @param uid Unique id.
 * @param value Bound value.
 * @param simple Is the bound value simple?
 * @param s State.
 */
invalidateWorking = \uid s ->
    putWorking(
        uid,
        null,
        s);
    
/* Globals Operations
 ******************************************************************************/
/**
 * Get list of global symbols.
 * 
 * @param s State.
 */
getGlobals := (.globals) \> hamt.keys;

/**
 * Register a new global.
 * 
 * @param name Global symbol name.
 * @param s State.
 */
addGlobal := \name s ->
    s.setGlobals(
        hamt.set(name, name, s.globals));

/* Local Operations
 ******************************************************************************/
addLocals := \locals s ->
    s.setLocals(
        [concat(
            locals,
            s.locals.(0)), s.locals.(1)]);

getLocals := \s ->
    s.locals.(0);

pushLocals := \s ->
    s.setLocals([[], s.locals]);

popLocals := \s ->
    s.setLocals(s.locals.(1));

}