/**
 * @fileOverview Main khepri compiler function.
 * 
 * Translates Khepri source to ECMAScript.
 * 
 * TODO: Use Error monad for each stage instead of direct composition with 
 * throwing functions.
 */
package compile
with
    import './stages/pre_normalize' pre_normalize,
    import './stages/lexical' lexical,
    import './stages/post_normalize' post_normalize,
    import './stages/inline' inline,
    import './stages/khepri_peep' khepri_peep,
    import './stages/transform' transform,
    import './stages/ecma_peep' ecma_peep
in {

var compiler :=
       pre_normalize
    \> lexical
    \> post_normalize
    \> inline
    \> khepri_peep
    \> transform
    \> ecma_peep;

var extract := \{tree} -> tree;


/**
 * Translate a Khepri AST to an ECMAScript AST.
 * 
 * @param root Khepri ast.
 * @param [options] Map of options sepecifying behavior of compiler.
 */
compile =
    (\root options -> ({
        'tree': root,
        'options': options || {}}))
   \>> compiler
   \> extract;

}