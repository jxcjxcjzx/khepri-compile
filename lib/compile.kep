/**
 * @fileOverview Main khepri compiler function.
 * 
 * Translates Khepri source to ECMAScript.
 */
package compile
with
    import 'akh::error' Error,
    
    import 'khepri-ast-zipper' {khepriZipper},
    
    import './stages/pre_normalize' pre_normalize,
    import './stages/lexical' lexical,
    import './stages/reachable' reachable,
    import './stages/post_normalize' post_normalize,
    import './stages/inline' inline,
    import './stages/khepri_peep' khepri_peep,
    import './stages/transform' transform,
    import './stages/ecma_peep' ecma_peep
in {

var compiler := \options x ->
    pre_normalize(options, x)
        .chain(lexical @ options)
        .chain(post_normalize @ options)
        .chain(inline @ options)
        .chain(reachable @ options)
        .chain(khepri_peep @ options)
        .chain(transform @ options)
        .chain(ecma_peep @ options);

/**
 * Translate a Khepri AST to an ECMAScript AST.
 * 
 * @param root Khepri ast.
 * @param [options] Map of options specifying behavior of compiler.
 * @param [err] Error callback.
 */
compile := let
    extract = .tree,
    thr = \x -> { throw x; }
in
    \root options err ->
        Error.runError(
            compiler @ (options || {}) {
                tree: khepriZipper root
            },
            extract,
            err || thr);

}