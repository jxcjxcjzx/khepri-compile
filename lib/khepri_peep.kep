/**
 * @fileOverview Khepri peephole optimization.
 */
package (
    optimize)
with
    import 'hashtrie' hashtrie,
    
    import 'khepri-ast-zipper' {khepriZipper},

    import 'khepri-ast::node' {Node setUserData setData},
    import 'khepri-ast::declaration' ast_declaration,
    import 'khepri-ast::statement' ast_statement,
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::pattern' ast_pattern,
    import 'khepri-ast::value' ast_value,
    
    import 'akh::base' {
        next
        'sequence': seq
        'sequencea': seqa},
    
    import 'akh::unique' Unique,
    import 'akh::trans::state' StateT,

    import 'zipper-m::trans::zipper' ZipperT,
    import 'zipper-m::walk' walk,
    
    import './builtin' {builtins},
    import './fun' fun,
    import './ast' {
        isPrimitive
        isNumberish
        isTruthy
        getUid}
in {

/* Operations
 ******************************************************************************/
var M = ZipperT (StateT Unique);

var run = \c ctx seed ->
    Unique.runUnique(
        StateT.evalStateT(
            ZipperT.runZipperT(c, ctx),
            hashtrie.empty),
        seed);

var pass = M.of null;

var node =  M.node;

var modify = M.modifyNode;
var set = M.setNode;

var unique = M.liftInner (Unique.unique);

var getBinding = \uid ->
    ?uid
        :M.lift(M.inner.get).map(\bindings ->
            hashtrie.get(uid, bindings))
        :pass;

var addBinding = \uid target ->
    M.lift <| M.inner.modify(\bindings ->
        hashtrie.set(uid, target, bindings));

/*
 ******************************************************************************/
var peepholes = {};

var addPeephole = \types, up, condition, f -> {
    var entry = {
        'condition': condition,
        'map': f,
        'up': up
    };
    
    types.forEach \ type -> {
        peepholes.(type) = ?peepholes.(type)
            :fun.concat(peepholes.(type), entry)
            :[entry];
    };
};

/* Constant Folding
 ******************************************************************************/
/**
 * Combine binary arithmetic operations on primitive literals
 */
let
    arithmetic = {
        '+': (+),
        '-': (-),
        '*': (*),
        '/': (/),
        '%': ('%'),
        '<<': (<<),
        '>>': (>>),
        '>>>': (>>>),
        '<': (<),
        '>': (>),
        '<=': (<=),
        '>=': (>=),
        '||': (||),
        '&&': (&&)}
in
    addPeephole(['BinaryExpression', 'LogicalExpression'], true,
        \{operator left right} ->
            arithmetic.(operator)
            && isPrimitive(left)
            && isPrimitive(right),
        
        modify \ {operator left right} -> let
            value = arithmetic.(operator)(left.value, right.value)
        in
            ast_value.Literal.create(null, typeof value, value));

/**
 * Combine simple unary operations on primitive literals
 */
let
    arithmetic = {
        '!': (!),
        '~': (~),
        'typeof': (typeof),
        '++': (++),
        '--': (--)}
in
    addPeephole(['UnaryExpression'], true,
        \{operator argument} ->
            arithmetic.(operator)
            && isPrimitive(argument),
        
        modify \ {operator argument} -> let
            value = arithmetic.(operator)(argument.value)
        in
            ast_value.Literal.create(null, typeof value, value));


/**
 * Reduce if statements with constant test.
 */
addPeephole(['IfStatement'], true,
    \node ->
        isPrimitive node.test,
    
    modify \ {test consequent alternate} ->
        ?isTruthy test
            :consequent
            :alternate);

/**
 * Reduce ternary expression with constant test.
 */
addPeephole(['ConditionalExpression'], true,
    \node ->
        isPrimitive node.test,
    
    modify \ {test consequent alternate} ->
        ?isTruthy test
            :consequent
            :alternate);

/**
 * Constant index in array expression.
 */
addPeephole(['MemberExpression'], true,
    \node ->
        (  node.computed
        && node.object.type === 'ArrayExpression'
        && isNumberish node.property),
    
    modify \ node ->
        node.object.elements.(node.property.value) || ast_value.Identifier.create(null, 'undefined'));

/* Constant Binding
 ******************************************************************************/
/**
 * Register constants bound in immutable variable declarations.
 * 
 * This also removes the declarations since it will be unused, unless it is the
 * only declaration of a var bound immutable to itself.
 */
addPeephole(['VariableDeclarator'], true,
    \node ->
        (  node.immutable
        && node.init),
    
    node.chain \ node ->
        addBinding(getUid node.id, node.init));

/**
 * Register constants bound in bindings.
 * 
 * This also removes the declarations since it will be unused.
 */
addPeephole(['Binding'], true,
    \node ->
        (node.pattern.type === 'IdentifierPattern'
        && getUid node.pattern),
    
    node.chain \ node ->
        seq(
            addBinding(getUid node.pattern.id, node.value),
            ?isPrimitive(node.value)
                :set([])
                :pass,
            ?node.value.type === 'Identifier'
                :getBinding(getUid node.value).chain \ binding ->
                    ?binding
                        :set([])
                        :pass
                :pass));

/**
 * Substitute bound value for identifies.
 */
addPeephole(['Identifier'], true,
    \node -> getUid node,
    
    node.chain \ node ->
    getBinding(getUid node).chain \ binding ->
        ?binding && (isPrimitive(binding) || binding.type === 'Identifier')
            :set(binding)
            :pass);

/* Binding Simplification
 ******************************************************************************/
/**
 * Expand a binding of a let expression to a set of bindings, with the top level
 * binding to the let body last.
 */
addPeephole(['Binding'], false,
    \node ->
        (node.value.type === 'LetExpression'),
    
    modify \ node ->
        fun.flatten(
           node.value.bindings.concat(
               ast_declaration.Binding.create(null, node.pattern, node.value.body))));

/* Binding Expression Normalization
 ******************************************************************************/
/**
 * Flatten variable declaration declaration lists and remove if declaration list
 * is empty.
 */
addPeephole(['VariableDeclaration'], true,
    \_ -> true,
    
    modify \ {declarations} ->
        let bound = fun.flattenr <| declarations in
            ?bound.length
                :ast_declaration.VariableDeclaration.create(null, bound)
                :null);


/**
 * Flatten let expression bindings lists and collapse to body 
 * when binding list is empty
 */
addPeephole(['LetExpression'], true,
    \_ -> true,
    
    modify \ {bindings body} ->
        let bound = fun.flattenr <| bindings in
            ?bound.length
                :ast_expression.LetExpression.create(null, bound, body)
                :body);

/**
 * Flatten with statement bindings lists and collapse to body 
 * when binding list is empty.
 */
addPeephole(['WithStatement'], true,
    \_ -> true,
    
    modify \ {bindings body} ->
        let bound = fun.flattenr <| bindings in
            ?bound.length
                :ast_statement.WithStatement.create(null, bound, body)
                :body);

/* Peepholes
 ******************************************************************************/
/**
 * Flatten let with let body.
 */
addPeephole(['LetExpression'], true,
    \node ->
        node.body.type === 'LetExpression',
    modify \ node ->
        ?node.body.type === 'LetExpression'
            :ast_expression.LetExpression.create(null,
                fun.concat(
                    node.bindings,
                    node.body.bindings),
                node.body.body)
            :node);

/**
 * Flatten curry of curry.
 */
addPeephole(['CurryExpression'], true,
    \node ->
        node.base.type === 'CurryExpression',
    modify\node ->
        ast_expression.CurryExpression.create(null,
            node.base.base,
            fun.concat(
                node.base.args,
                node.args)));

/* Let to With Statement Rewrites
 ******************************************************************************/
/**
 * Rewrite `return let` to a with statement.
 */
addPeephole(['ReturnStatement'], false,
    \node ->
        (node.argument && node.argument.type === 'LetExpression'),
    modify\node ->
        ast_statement.WithStatement.create(null,
            node.argument.bindings,
            ast_statement.BlockStatement.create(null, 
                [ast_statement.ReturnStatement.create(node.loc, node.argument.body)])));

/**
 * Rewrite `\...-> let` to a with statement.
 */
addPeephole(['FunctionExpression'], false,
    \node ->
        (node.body.type === 'LetExpression'),
    modify\node ->
        ast_expression.FunctionExpression.create(null,
            node.id,
            node.params,
            ast_statement.BlockStatement.create(null, [
                ast_statement.WithStatement.create(null,
                    node.body.bindings,
                    ast_statement.BlockStatement.create(null, 
                        [ast_statement.ReturnStatement.create(node.loc, node.body.body)]))])));

/**
 * Rewrite top level let expressions to with statements.
 */
addPeephole(['ExpressionStatement'], true,
    \node ->
        (node.expression && node.expression.type === 'LetExpression'),
    modify\node ->
        ast_statement.WithStatement.create(null,
            node.expression.bindings,
            ast_statement.BlockStatement.create(null, 
                [ast_statement.ExpressionStatement.create(node.loc, node.expression.body)])));

/**
 * Rewrite top level let expressions to with statements.
 */
addPeephole(['ExpressionStatement'], true,
    \node ->
        (  node.expression
        && node.expression.type === 'AssignmentExpression'
        && node.expression.right.type === 'LetExpression'),
    modify\node ->
        ast_statement.WithStatement.create(null,
            node.expression.right.bindings,
            ast_statement.BlockStatement.create(null, 
                [ast_statement.ExpressionStatement.create(node.loc,
                    ast_expression.AssignmentExpression.create(node.expression.loc, node.expression.operator,
                        node.expression.left,
                        node.expression.right.body))])));

/* Interface
 ******************************************************************************/
var upTransforms = \node -> 
    ((node && peepholes.(node.type)) || [])
        .filter(\x -> x.up && x.condition(node));

var downTransforms = \node -> 
    ((node && peepholes.(node.type)) || [])
        .filter(\x -> !x.up && x.condition(node));

var transform = \node transforms ->
    ?transforms.length
        :seqa(transforms.map(\x -> x.map))
        :pass;

var _transform = node.chain \ node -> 
    transform(node, downTransforms node);

var _transformPost = node.chain \ node ->
    transform(node, upTransforms node);

/**
 * 
 */
optimize = \ast data ->
    run(
        next(
            walk(M, _transform, _transformPost),
            node),
        khepriZipper(ast),
        data.unique);

}
