/**
 * @fileOverview
 */
package (
    transform)
with 
    import 'bes::record' record,
    import 'bes::array' array,

    import 'ecma-ast::clause' ecma_clause,
    import 'ecma-ast::declaration' ecma_declaration,
    import 'ecma-ast::expression' ecma_expression,
    import 'ecma-ast::node' ecma_node,
    import 'ecma-ast::program' ecma_program,
    import 'ecma-ast::statement' ecma_statement,
    import 'ecma-ast::value'ecma_value,
    
    import 'khepri-ast::clause' khepri_clause,
    import 'khepri-ast::declaration' khepri_declaration,
    import 'khepri-ast::expression' khepri_expression,
    import 'khepri-ast::node' khepri_node#{setData},
    import 'khepri-ast::pattern' khepri_pattern,
    import 'khepri-ast::program' khepri_program,
    import 'khepri-ast::statement' khepri_statement,
    import 'khepri-ast::value' khepri_value,
    
    import 'khepri-ast-zipper' {khepriZipper},

    import 'neith::tree' tree,
    import 'neith::zipper' zipper,

    import './scope' scope,
    import './tail' {Tail trampoline},
    import './fun' fun,

    import './package_manager::amd' _,
    import './package_manager::node' _
in {

var flip = \f -> \x y -> f(y, x);

/* Forward
 ******************************************************************************/
var _transform = \args(...) -> _transform.apply(null, args);

/* State
 ******************************************************************************/
var State = record.declare(null, [
    'ctx',
    'scope',
    'packageManager',
    'bindings']);

State.empty = State.create(null, scope.Scope.empty, null, [[], null]);

/*
 ******************************************************************************/
var ok = \x -> \s, ok -> ok(x, s);

var bind = \p f ->
    \s ok ->
        new Tail(p, s, \x, s -> f(x)(s, ok));

var pass = ok();

var next = \p n -> bind(p, \_ -> n);

var seqa = \arr -> fun.reduce(arr, next);

var seq = \args(...) -> seqa(args);

var binds = \p f ->
    bind(p, \x ->
        f.apply(undefined, x));

var cons = \a b ->
    bind(a, \x ->
        bind(b, \y ->
            ok([x].concat(y))));

var enumeration = fun.foldr@(
    flip(cons),
    ok []);

var extract = \s ok -> ok(s, s);

var setState = \s -> \_ ok -> ok(s, s);

var modifyState = \f -> bind(extract, \s -> setState(f(s)));

var examineState = \f -> bind(extract, \s -> f(s));

var examineScope = \f -> bind(extract, \s -> f(s.scope));

var examineRealScope = \f -> bind(extract, \s -> f(s.realScope));

var packageManager = examineState(\s -> ok(s.packageManager));

var modifyScope = \f ->
    \s, ok, err -> let
        scope = f(s.scope),
        newState = State.setScope(s, scope)
    in ok(scope, newState);

var setScope = \s -> modifyScope(\() -> s);

var setBindings = \bindings ->
    modifyState(\s -> s.setBindings(bindings));

var pushBindings = modifyState(\s -> s.setBindings([[], s.bindings]));

var popBindings = modifyState(\s -> s.setBindings(s.bindings.(1)));

var addBindings = \bindings ->
    modifyState(\s -> s.setBindings([s.bindings.(0).concat(bindings), s.bindings.(1)]));

var move = \op ->
    modifyState(\s ->
        s.setCtx(op(s.ctx)));

var modify = \f ->
    move tree.modifyNode@f;

var set = \f ->
    move tree.setNode@f;

var ctx = examineState(\s ->
    ok(s.ctx));

var get = \op ->
    examineState(\s ->
        ok(op(s.ctx)));

var node = get tree.node;

var enterBlock = examineScope \s ->
    setScope(scope.Scope.empty.setOuter(s));

var exitBlock = examineScope \s ->
    setScope(s.outer);

var addVar = \id uid ->
    examineScope(\s ->
        ?s.hasMapping(uid)
            :pass
            :let name = s.getUnusedId(id) in
                setScope(scope.Scope.addMapping(
                    scope.Scope.addMutableBinding(s, name),
                    uid,
                    name)));

var getMapping = \uid f ->
    examineScope \ s ->
        f(s.getMapping(uid));

var getName = \name uid ->
    getMapping(uid, ok);

var getBindings = \f ->
    bind(
        examineState <|\ s -> 
            enumeration(fun.map(\[name uid] -> getName(name, uid), s.bindings.(0))),
        f);

/* Values
 ******************************************************************************/
var identifier = \loc, name ->
    ecma_value.Identifier.create(loc, name);

var stringLiteral = \loc, value ->
    ecma_value.Literal.create(loc, 'string', value);

var nullLiteral = \loc ->
    ecma_value.Literal.create(loc, 'null', null);

/* Declaration
 ******************************************************************************/
var variableDeclaration = khepri_declaration.VariableDeclaration.create;

var variableDeclarator = ecma_declaration.VariableDeclarator.create;

/* Unpacks
 ******************************************************************************/
/**
 * Expand a complex binding to a list of identifier bindings.
 * 
 * @param base Value being unpacked.
 * @param pattern Pattern unpacking base value.
 */
var innerPattern = let
    objectElementUnpack = \base, pattern, key -> let
        innerBase = khepri_expression.MemberExpression.create(null, base, key, true)
    in
        ?pattern
            :fun.flatten <| innerPattern(innerBase, pattern)
            :khepri_declaration.Binding.create(null, identifier(null, key.value), innerBase)
in
    \base, pattern -> {
        switch (pattern.type) {
        case 'IdentifierPattern':
            return [
                khepri_declaration.Binding.create(null,
                    pattern.id,
                    base)];
        
        case 'AsPattern':
            return fun.concat(
                innerPattern(base, pattern.id),
                fun.flatten <| innerPattern(pattern.id, pattern.target));
        
        case 'ObjectPattern':
            return pattern.elements
                |> (fun.map @ \{target key} -> objectElementUnpack(pattern.ud.id, target, key))
                |> fun.flatten;
        
        default:
            return [];
        }
    };

/**
 * 
 */
var unpack = \pattern, value ->
    innerPattern(value, pattern)
        |> fun.flatten
        |> (fun.map @ \x -> variableDeclarator(null, x.pattern, x.value));

/**
 * 
 */
var unpackAssign = \pattern, value ->
    innerPattern(value, pattern)
        |> fun.flatten
        |> (fun.map @ \x -> ecma_expression.AssignmentExpression.create(null,'=', x.pattern, x.value));

/**
 * 
 */
var unpackParameters = \parameters -> let
    elementsPrefix = parameters.elements
        |> (fun.map@\x -> {
            // Avoid generating redundant unpacks for parameters names.
            switch (x.type) {
            case 'IdentifierPattern':
                return [];
            case 'AsPattern':
                return fun.flatten <| innerPattern(x.id, x.target);
            default:
                return innerPattern(x, x);
            }
        }),
    
    selfPrefix = ?parameters.self
        :innerPattern(
            ecma_expression.ThisExpression.create(null),
            parameters.self)
        :[],
    
    argumentsPrefix = ?parameters.id
        :innerPattern(
            identifier(null, 'arguments'),
            parameters.id)
        :[]
in
    fun.concat(
        elementsPrefix,
        selfPrefix,
        argumentsPrefix)
        |> fun.flatten;

/* Statements
 ******************************************************************************/
/**
 * With statement translation.
 */
var withStatementNoImport = \loc, bindings, body -> let
    vars = bindings
        |> (fun.map @ \imp ->
            unpack(imp.pattern, imp.value))
        |> fun.flatten,
    
    prefix = variableDeclaration(null, vars)
in
    khepri_statement.BlockStatement.create(loc,
        fun.concat(
            prefix,
            body.body));

/**
 * With statement translation.
 */
var withStatement = \packageManager, loc, bindings, body -> let
    flattenImport = \imp ->
        ?imp.type === 'ImportPattern'
            :khepri_declaration.Binding.create(null,
                imp.pattern,
                packageManager.importPackage(imp.from.value))
            :imp
in
    withStatementNoImport(loc,
        fun.map(flattenImport, bindings),
        body);

/* Expressions
 ******************************************************************************/
/**
 * Function Expression Normalization.
 */
var functionExpression = \loc, id, parameters, functionBody, prefix -> let
    params = parameters.elements
        |> (fun.filter@\x -> x.type !== 'EllipsisPattern'),
        
    bindings = unpackParameters(parameters)
        |> (fun.map @ \x -> variableDeclarator(null, x.pattern, x.value)),
    
    body = ?functionBody.type === "BlockStatement"
        :functionBody
        :khepri_statement.BlockStatement.create(null,
            khepri_statement.ReturnStatement.create(null, functionBody))
in
    khepri_expression.FunctionExpression.create(loc,
        id,
        params,
        khepri_statement.BlockStatement.create(body.loc,
            fun.concat(
                (prefix || []),
                ?bindings.length
                    :variableDeclaration(null, bindings)
                    :[],
                body.body)));

/**
 * Let expression normalization.
 */
var letExpression = \loc, bindings, body ->
    ecma_expression.SequenceExpression.create(null,
        fun.flatten <| fun.concat(
            fun.map(\x -> unpackAssign(x.pattern, x.value), bindings),
            body));

/**
 * 
 */
var unaryOperatorExpression = \loc op -> 
    khepri_expression.FunctionExpression.create(loc, null,
        khepri_pattern.ArgumentsPattern.create(null, null, [
            khepri_pattern.IdentifierPattern.create(null,
                identifier(null, 'x'))]),
        khepri_expression.UnaryExpression.create(null,
            op,
            identifier(null, 'x')));

/**
 * 
 */
var binaryOperatorExpression = \loc op -> let
    kind = ? op === '||' || op === '&&'
        :khepri_expression.LogicalExpression
        :khepri_expression.BinaryExpression
in
    khepri_expression.FunctionExpression.create(loc, null,
        khepri_pattern.ArgumentsPattern.create(null, null, [
            khepri_pattern.IdentifierPattern.create(null,
                identifier(null, 'x')),
            khepri_pattern.IdentifierPattern.create(null,
                identifier(null, 'y'))]),
        kind.create(null,
            op,
            identifier(null, 'x'),
            identifier(null, 'y')));

/**
 * 
 */
var ternaryOperatorExpression = \loc ->
    khepri_expression.FunctionExpression.create(loc, null,
        khepri_pattern.ArgumentsPattern.create(null, null, [
            khepri_pattern.IdentifierPattern.create(null,
                identifier(null, 'x')),
            khepri_pattern.IdentifierPattern.create(null,
                identifier(null, 'y')),
                khepri_pattern.IdentifierPattern.create(null,
                identifier(null, 'z'))]),
        khepri_expression.ConditionalExpression.create(null,
            identifier(null, 'x'),
            identifier(null, 'y'),
            identifier(null, 'z')));

/**
 * Curry expression translation.
 */
var curryExpression = \loc, base, args ->
    khepri_expression.CallExpression.create(null,
        khepri_expression.MemberExpression.create(null,
            base,
            identifier(null, 'bind')),
        fun.concat(
            nullLiteral(null),
            args));

/**
 * Pipe operator translation.
 */
var pipe = \loc, value, target ->
    khepri_expression.CallExpression.create(loc,
        target,
        [value]);

/**
 * 
 */
var singleCompose = \loc, f, g -> let
    fo = identifier(null, 'f'),
    go = identifier(null, 'g')
in
    khepri_expression.CallExpression.create(loc,
        khepri_expression.FunctionExpression.create(null, null,
            khepri_pattern.ArgumentsPattern.create(null, null, [
                khepri_pattern.IdentifierPattern.create(null,
                    fo),
                khepri_pattern.IdentifierPattern.create(null,
                    go)]),
            khepri_expression.FunctionExpression.create(null, null,
                khepri_pattern.ArgumentsPattern.create(null, null, [
                    khepri_pattern.IdentifierPattern.create(null,
                        identifier(null, 'x'))]),
                khepri_expression.CallExpression.create(null,
                    fo, [
                        khepri_expression.CallExpression.create(null,
                            go,
                            [identifier(null, 'x')])]))),
        [f, g]);

/**
 * 
 */
var multiCompose = \loc, f, g ->
    khepri_expression.CallExpression.create(loc,
        khepri_expression.FunctionExpression.create(null, null,
            khepri_pattern.ArgumentsPattern.create(null, null, [
                khepri_pattern.IdentifierPattern.create(null,
                    identifier(null, 'f')),
                khepri_pattern.IdentifierPattern.create(null,
                    identifier(null, 'g'))]),
        khepri_expression.FunctionExpression.create(null, null,
            khepri_pattern.ArgumentsPattern.create(null, null, []),
            khepri_expression.CallExpression.create(null,
                identifier(null, 'f'), [
                    khepri_expression.CallExpression.create(null,
                         khepri_expression.MemberExpression.create(null,
                             identifier(null, 'g'),
                             identifier(null, 'apply')),
                         [nullLiteral(null),
                         identifier(null, 'arguments')])]))),
        [f, g]);

/* Package
 ******************************************************************************/
var packageBlock = \packageManager, loc, exports, body -> let
    imports = ?body.type === 'WithStatement'
        :fun.filter(\x -> x.type === 'ImportPattern', body.bindings)
        :[],
    
    exportedNames = fun.map(\x -> x.id.name, exports.exports),
    
    targets = fun.reduce(imports, \p c -> {
        p.(c.from.value) = c.pattern;
        return p;
    }, {}),
    
    fBody = ?body.type === 'WithStatement'
        :khepri_statement.WithStatement.create(null,
            fun.filter(\x -> x.type !== 'ImportPattern', body.bindings),
            body.body)
        :body
in
    packageManager.definePackage(loc, exportedNames, imports, targets, fBody);

/* Transform
 ******************************************************************************/
var transformers = {};

var addTransform = \type pre post -> {
    var entry = {
        'pre': pre,
        'post': post
    };
    
    transformers.(type) = ?transformers.(type)
        :transformers.(type).concat(entry)
        :[entry];
};

// Declarations
addTransform('VariableDeclaration',
    null,
    modify \node ->
        ecma_declaration.VariableDeclaration.create(node.loc,
            node.declarations));

addTransform('VariableDeclarator',
    null,
    modify \node ->
        ecma_declaration.VariableDeclarator.create(node.loc,
            node.id,
            node.init));

addTransform('StaticDeclaration',
    modify \node ->
        ecma_statement.EmptyStatement.create(node.loc));

// Clauses
addTransform('CatchClause',
    null,
    modify \node ->
        ecma_clause.CatchClause.create(node.loc,
            node.param,
            node.body));

addTransform('SwitchCase',
    null,
    modify \node ->
        ecma_clause.SwitchCase.create(node.loc,
            node.test,
            node.consequent));

// Statement
addTransform('BlockStatement',
    pushBindings,
    seq(
        getBindings <|\ bindings ->
            modify \node ->
                ecma_statement.BlockStatement.create(node.loc,
                    fun.concat(
                        ecma_declaration.VariableDeclaration.create(null,
                            bindings.map(\x ->
                                ecma_declaration.VariableDeclarator.create(null,
                                    identifier(null, x)))),
                        node.body)),
        popBindings));

addTransform('ExpressionStatement',
    null,
    modify \node ->
        ecma_statement.ExpressionStatement.create(node.loc,
            node.expression));

addTransform('IfStatement',
    null,
    modify \node ->
        ecma_statement.IfStatement.create(node.loc,
            node.test,
            node.consequent,
            node.alternate));

addTransform('WithStatement',
    next(
        bind(packageManager, \packageManager -> 
            modify \node ->
                withStatement(
                    packageManager,
                    node.loc,
                    node.bindings,
                    node.body)),
        _transform));

addTransform('SwitchStatement',
    null,
    modify \node ->
        ecma_statement.SwitchStatement.create(node.loc,
            node.discriminant,
            node.cases));

addTransform('ReturnStatement',
    null,
    modify \node ->
        ecma_statement.ReturnStatement.create(node.loc,
            node.argument));

addTransform('ThrowStatement',
    null,
    modify \node ->
        ecma_statement.ThrowStatement.create(node.loc,
            node.argument));

addTransform('BreakStatement',
    modify \node ->
        ecma_statement.BreakStatement.create(node.loc,
            null));

addTransform('ContinueStatement',
    modify \node ->
        ecma_statement.ContinueStatement.create(node.loc,
            null));

addTransform('TryStatement',
    null,
    modify \node ->
        ecma_statement.TryStatement.create(node.loc,
            node.block,
            node.handler,
            node.finalizer));

addTransform('WhileStatement',
    null,
    modify \node ->
        ecma_statement.WhileStatement.create(node.loc,
            node.test,
            node.body));

addTransform('DoWhileStatement',
    null,
    modify \node ->
        ecma_statement.DoWhileStatement.create(node.loc,
            node.body,
            node.test));

addTransform('ForStatement',
    null,
    modify \node ->
        ecma_statement.ForStatement.create(node.loc,
            node.init,
            node.test,
            node.update,
            node.body));

// Expression
addTransform('AssignmentExpression',
    null,
    modify \node ->
        ecma_expression.AssignmentExpression.create(node.loc,
            node.operator,
            node.left,
            node.right));

addTransform('UnaryExpression',
    null,
    modify \node -> {
        var op = node.operator;
        switch (op) {
        case '++': op = '+'; break;
        case '--': op = '-'; break;
        }
        
        return ecma_expression.UnaryExpression.create(node.loc,
            op,
            node.argument);
    });

addTransform('BinaryExpression',
    modify \node -> {
        switch (node.operator) {
        case '\\>':
            return singleCompose(node.loc, node.right, node.left);
        case '\\>>':
            return multiCompose(node.loc, node.right, node.left);
        case '<\\':
            return singleCompose(node.loc, node.left, node.right);
        case '<<\\':
            return multiCompose(node.loc, node.left, node.right);
        case '|>':
            return pipe(node.loc, node.left, node.right);
        case '<|':
            return pipe(node.loc, node.right, node.left);
        default:
            return node;
        }
    },
    modify \node ->
        ecma_expression.BinaryExpression.create(node.loc,
            node.operator,
            node.left,
            node.right));

addTransform('LogicalExpression',
    null,
    modify \node ->
        ecma_expression.LogicalExpression.create(node.loc,
            node.operator,
            node.left,
            node.right));

addTransform('ConditionalExpression',
    null,
    modify \node ->
        ecma_expression.ConditionalExpression.create(node.loc,
            node.test,
            node.consequent,
            node.alternate));

addTransform('NewExpression',
    null,
    modify \node ->
        ecma_expression.NewExpression.create(node.loc,
            node.callee,
            node.args));

addTransform('CallExpression',
    null,
    modify \node ->
        ecma_expression.CallExpression.create(node.loc,
            node.callee,
            node.args));

addTransform('MemberExpression',
    null,
    modify \node ->
        ecma_expression.MemberExpression.create(node.loc,
            node.object,
            node.property,
            node.computed));

addTransform('LetExpression',
    seq(
        bind(node, \node -> let
            bindings = fun.flatten <| fun.map(\x -> innerPattern(null, x.pattern), node.bindings),
            identifiers = fun.map(\x -> [x.pattern.name, x.pattern.ud.uid], bindings)
        in
            addBindings(identifiers)),
        modify \node ->
            letExpression(node.loc,
                node.bindings,
                node.body)));

addTransform('CurryExpression',
    modify \node ->
        curryExpression(node.loc,
            node.base,
            node.args));

addTransform('UnaryOperatorExpression',
    next(
        modify \node ->
            unaryOperatorExpression(node.loc, node.op),
        _transform));

addTransform('BinaryOperatorExpression',
    next(
        modify \node ->
            binaryOperatorExpression(node.loc, node.op),
        _transform));

addTransform('TernaryOperatorExpression',
    next(
        modify \node ->
            ternaryOperatorExpression(node.loc),
        _transform));

addTransform('FunctionExpression',
    seq(
        enterBlock,
        modify \node ->
            functionExpression(node.loc,
                node.id,
                node.params,
                node.body,
                node.ud && node.ud.prefix)),
    seq(
        exitBlock,
        modify \node ->
            ecma_expression.FunctionExpression.create(null,
                node.id,
                node.params,
                node.body)));

addTransform('ArrayExpression',
    null,
    modify \node ->
        ecma_expression.ArrayExpression.create(node.loc,
            node.elements));

addTransform('ObjectExpression',
    null,
    modify \node ->
        ecma_expression.ObjectExpression.create(node.loc,
            node.properties));

addTransform('ObjectValue',
    null,
    modify \node ->
        ecma_value.ObjectValue.create(node.loc,
            node.key,
            node.value));

// Patterns
addTransform('ArgumentsPattern',
    null,
    modify \node ->
        node.id);

addTransform('IdentifierPattern',
    bind(node, \node ->
        ?node.ud && node.ud.uid !== undefined
            :addVar(node.name, node.ud.uid)
            :pass),
    modify \node ->
        node.id);

addTransform('AsPattern',
    null,
    modify \node ->
        node.id);

addTransform('ObjectPattern',
    null,
    modify \node ->
        node.ud.id);

addTransform('EllipsisPattern',
    null,
    modify \node ->
        (node.ud && node.ud.id));

addTransform('SinkPattern',
    null,
    modify \node ->
        (node.ud && node.ud.id));

// Program
addTransform('Program',
    seq(
        pushBindings,
        modify \node ->
            ?node.body.type === 'Package'
                :node
                :setData(node, 'prefix',
                    khepri_statement.ExpressionStatement.create(null,
                        khepri_value.Literal.create(null, 'string', "use strict")))),
    getBindings <|\ bindings ->
        modify \node ->
            ecma_program.Program.create(node.loc,
                fun.concat(
                    ?node.ud && node.ud.prefix :node.ud.prefix :[],
                    ecma_declaration.VariableDeclaration.create(null,
                        bindings.map(\x ->
                            ecma_declaration.VariableDeclarator.create(null,
                                identifier(null, x)))),
                    node.body)));

// Package
addTransform('Package',
    bind(packageManager, \packageManager ->
        modify \node ->
            packageBlock(
                packageManager,
                node.loc,
                node.exports,
                node.body)));

// Value
addTransform('Identifier',
    bind(node, \node ->
        ?node.ud && node.ud.uid
            :next(
                addVar(node.name, node.ud.uid),
                getMapping(node.ud.uid, \name ->
                    set <| identifier(node.loc, name)))
            :set <| identifier(node.loc, node.name)));

/*
 *****************************************************************************/
var _trans = \node -> {
    if (node && node instanceof khepri_node.Node) {
        var t = transformers.(node.type);
        if (t && t.(0).pre)
            return t.(0).pre;
    }
    return pass;
};

var _transp = \node -> {
    if (node && node instanceof khepri_node.Node) {
        var t = transformers.(node.type);
        if (t && t.(0).post)
            return t.(0).post;
    }
    return pass;
};

_transform = bind(node, _trans);

var _transformPost = bind(node, _transp);

var walk = \pre post ->
    next(
        pre,
        bind(ctx, \t -> {
        if (zipper.isLeaf t) {
            var loop = next(
                post,
                bind(ctx, \t -> {
                    if (zipper.isLast t) {
                        if (zipper.isRoot t)
                            return ok();
                        return next(
                            move zipper.up,
                           loop);
                    } else {
                        return next(move zipper.right, walk(pre, post));
                    }
                }));
            return loop;
        }
        return next(move zipper.down, walk(pre, post));
    }));

/* API
 *****************************************************************************/
/**
 * 
 */
transform = \ast manager -> {
    with 
        import './package_manager/amd' amd_manager,
        import './package_manager/node' node_manager
    in {
        var packageManager = amd_manager;
        if (manager === 'node')
            packageManager = node_manager;

        var s = State.empty
            .setCtx(khepriZipper ast)
            .setScope(scope.Scope.empty)
            .setPackageManager(packageManager);
        
        return trampoline <| next(
            walk(_transform, _transformPost),
            node)(s, \x -> x);
    }
};

}