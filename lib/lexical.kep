/**
 * @fileOverview Lexical checking of an AST and tagging of identifiers with unique
 * ids.
 */
package (
    check)
with
    import 'khepri-ast::node' ast_node#{setData setUserData},
    import 'khepri-ast::pattern' ast_pattern,
    import 'khepri-ast::value' ast_value,
    
    import 'akh::base' {
        next
        'sequence': seq
        'sequencea': seqa},
    import 'akh::trans::statei' StateT,
    import 'akh::identity' Identity,
    import 'akh::error' Error,
    import 'akh::trans::error' ErrorT,
    import 'akh::unique' Unique,
    
    import 'zipper-m::trans::tree' TreeZipperT,
    
    import './ast' {type},
    import './scope' scope#{Scope},
    import './fun' {foldl}
in {

var reserved = \node ->
    (node && node.ud && node.ud.reserved);

/* Forward declarations
 ******************************************************************************/
var _check;

/* Monad
 ******************************************************************************/
var M = ErrorT (TreeZipperT (StateT (Unique)));

var run = \p s ctx ok err->
    Unique.runUnique(
        StateT.evalStateT(
            TreeZipperT.runTreeZipperT(
                ErrorT.runErrorT(
                    p,
                    ok \> M.inner.of,
                    err \> M.inner.of),
            ctx),
            s),
        1000);

var error = M.fail;

var lift = M.lift;

var unique = M.chain @ (M.liftInner.liftInner (Unique.unique));

// Scope Operations
////////////////////////////////////////
var extractScope = M.liftInner (M.inner.inner.get);

var examineScope = M.chain @ extractScope;

var modifyScope = M.liftInner <\ M.inner.inner.modify;

var push = modifyScope scope.push;
var pop = modifyScope scope.pop;

// Movement Operations
////////////////////////////////////////
var extractCtx = lift (M.inner.get);

var extract = lift (M.inner.node);

var inspect = M.chain @ extract;

var move = lift <\ M.inner.move;

var up = lift (M.inner.up);
var down = lift (M.inner.down);
var left = lift (M.inner.left);
var right = lift (M.inner.right);

var root = lift (M.inner.root);

var moveChild =  lift <\ M.inner.child;

var modifyNode = lift <\ M.inner.modifyNode;
var setNode = lift <\ M.inner.setNode;

var checkTop = inspect \ x -> _check x; // forward

var child = \edge ...actions ->
    seq(
        moveChild edge,
        seqa actions,
        up);

var checkChild = \edge ->
    child(edge,
        checkTop);

/* Operations
 ******************************************************************************/
/**
 * Noop
 */
var pass = M.of();

/**
 * When `test` is true for current node, evaluate consequent. Otherwise evalaute
 * alternate.
 */
var when = \test consequent alternate ->
    inspect \ node ->
        ?test node
            :consequent
            :(alternate || pass);

/**
 * Create a new lexical block for body.
 */
var block = \body(...) ->
    seq(
        push,
        seqa body,
        pop);

/**
 * Define a new identifier and create a uid entry for it.
 */
var addUid = \id ->
    unique \ uid ->
        modifyScope \ s ->
            scope.addUid(s, id, uid);

/**
 * Get the uid of an identifier.
 */
var getUid = \id ->
    extractScope.map \ s ->
        s.getUid(id);

/**
 * Ensure the current scope contains a binding for `id`.
 */
var checkHasBinding = \id, loc ->
    examineScope \ s ->
        ?s.hasBinding(id)
            :pass
        :error("Undeclared identifier:'" + id + "' at:" + loc);

/**
 * Ensure the current scope does not have has a binding for `id`.
 */
var checkCanAddBinding = \id loc -> 
    examineScope \ s ->
        ?s.hasOwnBinding(id)
            :let
                start = loc && loc.start,
                binding = s.getBinding(id),
                end = binding.loc && binding.loc.start
            in
                error("'" + id + "' at:" + start + " already bound for scope from:" + end)
        :pass;

/**
 * Ensure `id` is a mutable binding.
 */
var checkCanAssign = \id, loc -> 
    examineScope \ s ->
        ?s.hasMutableBinding(id)
            :pass
        :error("Assign to immutable variable:'" + id + "' at:" + loc.start);

/**
 * Mark existing binding for `id` as immutable.
 * 
 * This must take place in the same scope the variable was declared in.
 */
var markBindingImmutable = \id loc ->
    examineScope \ s ->
        ?s.hasOwnBinding id
            :modifyScope \ s ->
                scope.setBindingMutability(s, id, false)
            :error("Cannot mark variable:'" + id + "' at:" + loc.start + ' immutable in enclosed scope');

/**
 * Add a new mutable binding in the current scope.
 * Does not perform any checks.
 */
var addMutableBinding = \id, loc -> 
    seq(
         modifyScope \ s ->
             scope.addMutableBinding(s, id, loc),
         addUid id);

/**
 * Adds a new static binding in the current scope.
 * 
 * Static binds are immutable and are not effected by renaming.
 * 
 * Does not perform any checks.
 */
var addStaticBinding = \id, loc -> 
     modifyScope \ s ->
         scope.addImmutableBinding(s, id, loc);

/**
 * Adds a new immutable binding in the current scope.
 * Does not perform any checks.
 */
var addImmutableBinding = \id, loc -> 
    seq(
         modifyScope \ s ->
             scope.addImmutableBinding(s, id, loc),
         addUid id);

/**
 * Add a new mutable binding in the current scope.
 * Checks to make sure the new binding is valid.
 */
var addMutableBindingChecked = \id, loc ->
    seq(
        checkCanAddBinding(id, loc),
        addMutableBinding(id, loc));

/**
 * Add a new immutable binding in the current scope.
 * Checks to make sure the new binding is valid.
 */
var addImmutableBindingChecked = \id, loc ->
    seq(
        checkCanAddBinding(id, loc),
        addImmutableBinding(id, loc));

/**
 * Add a new immutable binding in the current scope.
 * Checks to make sure the new binding is valid.
 */
var addStaticBindingChecked = \id, loc ->
    seq(
        checkCanAddBinding(id, loc),
        addStaticBinding(id, loc));

/* Checks
 ******************************************************************************/
var checks = {};

var addCheck = \type, check -> {
    if (Array.isArray(type))
        type.forEach \x -> addCheck(x, check);
    else
        checks.(type) = check;
};

// Program and Packages
addCheck@'Program' <|
    block(
        checkChild 'body');

addCheck@'PackageExports' <|
    checkChild 'exports';

addCheck@'PackageExport' <|
    inspect \ node ->
        addMutableBindingChecked(
            node.id.name,
            node.loc);

addCheck@'Package' <|
    block(
        checkChild 'exports',
        // Evaluate body in same scope
        child('body',
            when(type \> (===, 'WithStatement'),
                seq(
                    checkChild 'bindings',
                    child('body',
                        checkChild 'body')),
                checkChild 'body')));

// Clause
addCheck@'SwitchCase' <| seq(
    checkChild 'test',
    checkChild 'consequent');

addCheck@'CatchClause' <|
    block(
        inspect \ node ->
            addImmutableBindingChecked(node.param.name, node.param.loc),
        checkChild 'param',
        child('body',
            checkChild 'body'));

// Declarations
addCheck@['StaticDeclaration', 'VariableDeclaration'] <|
    checkChild 'declarations';

addCheck@'StaticDeclarator' <|
    inspect \ node ->
        addStaticBindingChecked(node.id.name, node.loc);

addCheck@'VariableDeclarator' <|
    inspect \ node -> let
        bind = ?node.immutable
            :addImmutableBindingChecked(node.id.name, node.loc)
            :addMutableBindingChecked(node.id.name, node.loc)
    in
        ?node.recursive
            :seq(
                bind,
                checkChild 'id',
                checkChild 'init')
            :seq(
                checkChild 'init',
                bind,
                checkChild 'id');

addCheck@'Binding' <|
    when((.recursive),
        seq(
            checkChild 'pattern',
            checkChild 'value'),
        seq(
            checkChild 'value',
            checkChild 'pattern'));

// Statement
addCheck@'BlockStatement' <|
    block(
        checkChild 'body');

addCheck@'ExpressionStatement' <|
    checkChild 'expression';

addCheck@'IfStatement' <| seq(
    checkChild 'test',
    block(
        checkChild 'consequent'),
    block(
        checkChild 'alternate'));

addCheck@'WithStatement' <|
    block(
        checkChild 'bindings',
        child('body',
            checkChild 'body'));

addCheck@'SwitchStatement' <|
    block(
        checkChild 'discriminant',
        checkChild 'cases');

addCheck@['ReturnStatement', 'ThrowStatement'] <|
    checkChild 'argument';

addCheck@'TryStatement' <| seq(
    checkChild 'block',
    block(
        checkChild 'handler'),
    block(
        checkChild 'finalizer'));

addCheck@'WhileStatement' <| seq(
    checkChild 'test',
    block(
        checkChild 'body'));

addCheck@'DoWhileStatement' <| seq(
    block(
        checkChild 'body'),
    checkChild 'test');

addCheck@'ForStatement' <|
    block(
        checkChild 'init',
        checkChild 'test',
        checkChild 'update',
        block(
            checkChild 'body'));

// Expression
addCheck@'FunctionExpression' <|
    block(
         inspect \ node ->
             ?node.id
                 :addImmutableBinding(node.id.name, node.loc)
                 :pass,
         checkChild 'id',
         checkChild 'params',
         // Evaluate body in same scope
         child('body',
             when(type \> (===, 'BlockStatement'),
                 checkChild 'body',
                 checkTop)));

addCheck@'UnaryExpression' <|
    checkChild 'argument';

addCheck@'AssignmentExpression' <| seq(
    checkChild 'left',
    inspect \ {operator left} ->
        ?left.type === 'Identifier'
            :seq(
                checkCanAssign(left.name, left.loc),
                ?operator === ':='
                    :markBindingImmutable(left.name, left.loc)
                    :pass)
            :pass,
    checkChild 'right');

addCheck@['LogicalExpression', 'BinaryExpression'] <| seq(
    checkChild 'left',
    checkChild 'right');

addCheck@'ConditionalExpression' <| seq(
    checkChild 'test',
    checkChild 'consequent',
    checkChild 'alternate');

addCheck@['CallExpression', 'NewExpression'] <| seq(
    checkChild 'callee',
    checkChild 'args');

addCheck@'MemberExpression' <| seq(
    checkChild 'object',
    when((.computed),
        checkChild 'property'));

addCheck@'ArrayExpression' <|
    checkChild 'elements';

addCheck@'ObjectExpression' <|
    checkChild 'properties';

addCheck@'LetExpression' <|
    block(
        checkChild 'bindings',
        checkChild 'body');

addCheck@'CurryExpression' <| seq(
    checkChild 'base',
    checkChild 'args');

// Patterns
addCheck@'SinkPattern'<|
    unique \ uid ->
    modifyNode \ node ->
        ast_pattern.IdentifierPattern.create(node.loc,
            setData(
                ast_value.Identifier.create(null, '_'),
                'uid',
                uid));

addCheck@'EllipsisPattern' <|
    checkChild 'id';

addCheck@['SliceUnpack', 'RelativeUnpack', 'ImportPattern'] <|
    checkChild 'pattern';

addCheck@'IdentifierPattern' <| seq(
    inspect \ node ->
        ?reserved node
            :addImmutableBinding(node.id.name, node.loc)
            :addImmutableBindingChecked(node.id.name, node.loc),
    checkChild 'id');

addCheck@'AsPattern' <| seq(
    checkChild 'id',
    inspect \ node ->
        child('target',
            modifyNode \ target ->
                // Hack: For generating argument lists, we want to use the 
                // as pattern name if possible.
                setData(target, 'id', node.id),
            checkTop));

addCheck@'ObjectPattern' <|
    checkChild 'elements';

addCheck@'ObjectPatternElement' <| seq(
    checkChild 'target',
    checkChild 'key');

addCheck@'ArgumentsPattern' <| seq(
    checkChild 'id',
    checkChild 'elements',
    checkChild 'self');

// Value
addCheck@'ObjectValue' <|
    checkChild 'value';

addCheck@'Identifier' <|
    inspect \ node#{name loc} ->
        seq(
            examineScope \ s ->
                 setNode <| setData(node, 'uid', s.getUid(name)),
            checkHasBinding(name, loc));

/*
 ******************************************************************************/
_check = \node -> {
    if (Array.isArray(node)) {
        if (!node.length)
            return pass;
        
        return seq(
            down,
            seqa(node.map(\_ i -> 
                ?i === node.length - 1
                    :checkTop
                    :next(checkTop, right))),
            up);
    }
    
    if (node instanceof ast_node.Node && checks.(node.type))
        return checks.(node.type);
    
    return pass;
};

var g = \x -> x.concat('require', 'module', 'exports');

var addBindings = foldl@(scope.addImmutableBinding, Scope.empty);

/**
 * 
 */
check = \ast globals seed ->
    run(
        seq(
            checkTop,
            root,
            extractCtx.chain \ x ->
            unique \ unique ->
            extractScope.map \ s ->
                ({'tree': x , 'data': {'unique': unique}})),
        addBindings(g(globals || [])),
        ast,
        Error.of,
        Error.fail,
        seed);

}