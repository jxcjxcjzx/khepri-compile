/**
 * @fileOverview Pseudo AST nodes.
 * 
 * These nodes cannot be created in regular Khepri code, but are used in the restricted form
 * to represent specific behavior.
 */
package (
    RelativeUnpack
    SliceUnpack
    MemberUnpack
    
    Import)
with
    import 'khepri-ast::node'{defineNode Node},
    import 'khepri-ast::pattern' {Pattern}
in
{

RelativeUnpack = defineNode(Pattern, 'RelativeUnpack',
    ['pattern', 'target'],
    ['index', 'min'],
    function \loc pattern target index min =self-> {
        Node.call(self, loc);
        self.pattern = pattern;
        self.target = target;
        self.index = index;
        self.min = min;
    });

/**
 * 
 */
SliceUnpack = defineNode(Pattern, 'SliceUnpack',
    ['pattern', 'target'],
    ['from', 'to'],
    function \loc pattern target from to =self-> {
        Node.call(self, loc);
        self.pattern = pattern;
        self.target = target;
        self.from = from;
        self.to = to;
    });

/**
 * 
 */
MemberUnpack = defineNode(Pattern, 'MemberUnpack',
    ['target', 'key'],
    [],
    function \loc target key =self-> {
        Node.call(self, loc);
        self.target = target;
        self.key = key;
    });

/**
 * Package import.
 * 
 * @param from Package name.
 */
Import = defineNode(Pattern, 'Import',
    [],
    ['from'],
    function \loc from =self-> {
        Node.call(self, loc);
        self.from = from;
    });


}
