/**
 * @fileOverview Khepri AST nodes predicates.
 */
package (
    isLiteral
    isNumberish
    isPrimitive
    isSimple
    isPod
    
    isTruthy
    
    isBlockFunction
    isLambda)
{

/* Literal
 ******************************************************************************/
/**
 * Is a node a literal.
 * 
 * This includes regular expressions.
 */
isLiteral = \node ->
    (node.type === 'Literal');

/**
 * Can a node be treated as a number?
 */
isNumberish = \node ->
    (  isPrimitive node
    && !isNaN node.value);

/**
 * Is a node a primitive value.
 */
isPrimitive = \node ->
    isLiteral node && (
        node.kind === 'string'
        || node.kind === 'number'
        || node.kind === 'boolean'
        || node.kind === 'null');

/**
 * Is a node a language literal?
 */
isSimple = \node ->
    (  isLiteral node 
    || node.type === 'ArrayExpression'
    || node.type === 'ObjectExpression');

/**
 * Is a node plain old data?
 * 
 * Plain old data includes all primitives as well as arrays and objects, so long
 * as those object contain only pod.
 */
isPod = \node ->
    (  isPrimitive node
    || node.type === 'ArrayExpression' && node.elements.every(isPod)
    || node.type === 'ObjectExpression' && node.elements.every(\x -> isPod(x.value)));

/* Value
 ******************************************************************************/
/**
 * Is a node a constant truthy value.
 */
isTruthy = \node ->
    (  isPrimitive node
    && !!node.value);

/* Function
 ******************************************************************************/
/**
 * Is a node a function with a block body?
 */
isBlockFunction = \node ->
    (  node.type === 'FunctionExpression'
    && node.body.type === 'BlockStatement');

/**
 * Is a function a lambda function?
 */
isLambda = \node ->
    (  node.type === 'FunctionExpression'
    && !node.id
    && !isBlockFunction node
    && !node.params.self
    && !node.params.id);


}