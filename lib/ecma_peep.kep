/**
 * @fileOverview ECMAScript AST peephole rewrite pass.
 */
package (
    optimize)
with
    import 'ecma-ast-zipper' {ecmaZipper},
    
    import 'ecma-ast::node' {modify},
    import 'ecma-ast::statement' ast_statement,
    import 'ecma-ast::expression' ast_expression,
    
    import './ast' {type},
    import './fun' {concat flatten map foldr},
    import './rewriter' {
        UP
        DOWN
        Rewriter
        rewrite}
in {

/**
 * Flatten the body of a block statement.
 */
var flattenBlockBody :=
    map @ (\x ->
        ?!x || type x === 'EmptyStatement'
            :[]
        :?type x === 'BlockStatement'
            :x.body
        :x)
    \> flatten;

/**
 * Merge neighboring variable declarations in a block of code.
 */
var mergeBlockDeclarations :=
    foldr @ (
        \p c ->
            ?(type c === 'VariableDeclaration' && type p.(0) === 'VariableDeclaration')
                :concat(
                    modify(c, {
                        'declarations': concat(c.declarations, p.(0).declarations)
                    }, {}),
                    p.slice(1))
                :concat(c, p),
        []);

/* Transforms
 ******************************************************************************/
var peepholes = new Rewriter();

var always := \_ -> true;

/* Declarations
 ******************************************************************************/
/**
 * Filter out empty variable declarators.
 */
peepholes.add('VariableDeclaration', DOWN,
    always,
    
    \node -> let
        declarations = node.declarations.filter(\x -> !!x)
    in
        modify(node, {
            'declarations': declarations
        }, {}));

/**
 * Remove empty Variable declarations.
 */
peepholes.add('VariableDeclaration', UP,
    \node ->
        !node.declarations.length,
    
    \_ -> null);

/**
 * Reduce block statements.
 * 
 * Removes top level empty statements and also merges child blocks into parent
 */
peepholes.add(['Program', 'BlockStatement'], UP,
    always,
    
    \node ->
        modify(node, {
            'body': flattenBlockBody(node.body)
        }, {}));

/**
 * Merge var neighboring declarations
 */
peepholes.add(['Program', 'BlockStatement'], UP,
    always,
    \node ->
        modify(node, {
            'body': mergeBlockDeclarations(node.body)
            }, {}));

/* Interface
 ******************************************************************************/
optimize = ecmaZipper \> rewrite @ peepholes;

}
