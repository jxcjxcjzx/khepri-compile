/**
 * @fileOverview Khepri builtins.
 */
package (
    builtins
    definitions
    
    member)
with
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::node' {modify},
    import 'khepri-ast::pattern' ast_pattern,
    import 'khepri-ast::value' ast_value,
    
    import './pseudo/expression' {ApplyExpression},
    
    import './ast' {
        type
        setUd
        getUid
        setUid
        setLocals},
    import './fun' {
        flip
        forEach}
in {

var unique = (\-> {
    var x = 0;
    return \-> {
        x = x + 1;
        return x;
    };
}());


var identifier := \name uid ->
    setUid(
        uid,
        ast_value.Identifier.create(null, name));

var uniqueId := \name ->
    identifier(name, unique());

/* Exports
 ******************************************************************************/
definitions := {};
builtins := {};

var addSymbol = \name id def -> {
    builtins.(name) = id;
    definitions.(name) = def;
};

var registerAliasedSymbol = \name alias def -> {
    addSymbol(
        name,
        uniqueId alias,
        def);
};

/* Reserved Identifiers
 ******************************************************************************/
builtins.('require') = uniqueId 'require';
builtins.('exports') = uniqueId 'exports';
builtins.('module') = uniqueId 'module';

builtins.('undefined') = uniqueId 'undefined';

/* Unary Operators
 ******************************************************************************/
var unary := \op xArg ->
    ast_expression.FunctionExpression.create(null, null,
        ast_pattern.ArgumentsPattern.create(null, null, [
            ast_pattern.IdentifierPattern.create(null, xArg)]),
        op(xArg))
    |> setLocals @ [getUid xArg];

with
    unary = \op ->
        unary(op, uniqueId 'x'),
    
    unaryOp = \op ->
        unary\x ->
            ast_expression.UnaryExpression.create(null, op, x)
in {
    forEach @ [
        ['typeof', '__typeof'],
        ['void', '__void'],
        ['~', '__bnot'],
        ['!', '__lnot'],
        ['++', '__plus'],
        ['--', '__minus']
    ] \ [op name] -> {
        registerAliasedSymbol(op, name, unaryOp(op));
    };
}

/* Ternary Operator
 ******************************************************************************/
with
    ternaryOperator = let
        xArg = uniqueId 'x',
        yArg = uniqueId 'y',
        zArg = uniqueId 'z'
    in
        ast_expression.FunctionExpression.create(null, null,
            ast_pattern.ArgumentsPattern.create(null, null, [
                ast_pattern.IdentifierPattern.create(null,
                    xArg),
                ast_pattern.IdentifierPattern.create(null,
                    yArg),
                    ast_pattern.IdentifierPattern.create(null,
                    zArg)]),
            ast_expression.ConditionalExpression.create(null,
                xArg,
                yArg,
                zArg))
            |> setLocals @ [getUid xArg, getUid yArg, getUid zArg]
in {
    registerAliasedSymbol('?', '__cond',
        ternaryOperator);
}

/* Binary Operators
 ******************************************************************************/
var binary = \op -> let
    xArg = uniqueId 'x',
    yArg = uniqueId 'y'
in
    ast_expression.FunctionExpression.create(null, null,
        ast_pattern.ArgumentsPattern.create(null, null, [
            ast_pattern.IdentifierPattern.create(null, xArg),
            ast_pattern.IdentifierPattern.create(null, yArg)]),
        op(xArg, yArg))
    |> setLocals @ [getUid xArg, getUid yArg];

var registerBinary = \op name impl -> {
    registerAliasedSymbol(op, name,
        binary impl);
};

// Binary Operations
with
    binaryOp = \op ->
        ast_expression.BinaryExpression.create @ null @ op
in {
    forEach @ [
        ['+', '__add'],
        ['-', '__sub'],
        ['*', '__mul'],
        ['/', '__div'],
        ['%', '__mod'],
        ['<<', '__blas'],
        ['>>', '__bras'],
        ['>>>', '__brls'],
        ['&', '__band'],
        ['^', '__bxor'],
        ['|', '__bor'],
        ['<', '__lt'],
        ['>', '__gt'],
        ['<=', '__lte'],
        ['>=', '__gte'],
        ['==', '__eq'],
        ['!=', '__neq'],
        ['===', '__seq'],
        ['!==', '__sneq'],
        ['instanceof', '__instanceof'],
        ['||', '__or'],
        ['&&', '__and']
    ] \ [op name] -> {
        registerBinary(op, name, binaryOp op);
    };
}

// Flip Operator
registerAliasedSymbol('_', '_',
    unary(
        \f ->
            binary \ x y ->
                ast_expression.CallExpression.create(null, f, [y, x]),
        uniqueId 'f'));

// New
registerBinary('new', '__new', \x y ->
    ast_expression.NewExpression.create(null, x, [y]));

// Computed Member
registerBinary('.', '__dot', \x y ->
    ast_expression.MemberExpression.create(null, x, y, true));

// Checked
registerBinary('??', '__chk', \x y ->
    ast_expression.BinaryExpression.create(null, '&&',
        x,
        ast_expression.CallExpression.create(null, y, [x])));

// Curry
registerBinary('@', '__curry', \x y ->
    ast_expression.CurryExpression.create(null, x, [y]));

// Pipes
with
    pipe = \callee arg ->
        ast_expression.CallExpression.create(null,
            callee,
            [arg])
in {
    registerBinary('<|', '__pipe', pipe);
    registerBinary('|>', '__rpipe', flip pipe);
}

// PipeN
with
    pipe = ApplyExpression.create @ null
in {
    registerBinary('<<|', '__pipen', pipe);
    registerBinary('|>>', '__rpipen', flip pipe);
}

// Compose
with
    singleCompose = \f g -> 
        unary(
            \x -> 
                ast_expression.CallExpression.create(null,
                    f, [
                        ast_expression.CallExpression.create(null,
                            g,
                            [x])]),
            uniqueId 'z')
in {
    registerBinary('<\\', '__compose', singleCompose);
    registerBinary('\\>', '__rcompose',  flip singleCompose);
}

// ComposeN
with
    multiCompose = \f g -> let
        args = uniqueId 'args'
    in
        ast_expression.FunctionExpression.create(null, null,
            ast_pattern.ArgumentsPattern.create(null,
                ast_pattern.IdentifierPattern.create(null, args),
                [],
                null),
            ast_expression.CallExpression.create(null,
                f, [ApplyExpression.create(null, g, args)]))
         |> setLocals @ [getUid args]
in {
    registerBinary('<<\\', '__composen', multiCompose);
    registerBinary('\\>>', '__rcomposen', flip multiCompose);
}

/* Macro Operators
 ******************************************************************************/
/**
 * Replace the hole in a dot expression with `arg`.
 */
var subDotHole := \expr arg ->
    ?type expr === 'MemberExpression'
        :modify @ expr {
            'object': ?expr.object
                :subDotHole(expr.object, arg)
                :arg
        }
    
    :?type expr === 'CallExpression'
         :modify @ expr {
             'callee': subDotHole(expr.callee, arg)
         }
    
    :expr;

/**
 * Dot expression macro.
 */
member := \expr uid ->
    unary(
        subDotHole @ expr,
        identifier('x', uid));

}