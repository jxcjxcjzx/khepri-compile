/**
 * @fileOverview Khepri builtins.
 */
package (
    builtins
    definitions
    
    member)
with
    import 'khepri-ast::pattern' ast_pattern,
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::value' ast_value,
    
    import './ast' {
        setUd
        getUid
        setUid},
    import './fun' {
        flip}
in {

var setLocals := \node locals ->
    setUd('locals', locals, node);

var identifier = \name uid ->
    setUid(
        uid,
        ast_value.Identifier.create(null, name));

var unique = (\-> {
    var x = 0;
    return \-> {
        x = x + 1;
        return x;
    };
}());

/* Exports
 ******************************************************************************/
definitions := {};
builtins := {};

var addSymbol = \name id def -> {
    builtins.(name) = id;
    definitions.(name) = def;
};

var registerAliasedSymbol = \name alias def -> {
    addSymbol(name,
        identifier(alias, unique()),
        def);
};

/* Reserved Identifiers
 ******************************************************************************/
builtins.('require') = identifier('require', unique());
builtins.('exports') = identifier('exports', unique());
builtins.('module') = identifier('module', unique());

builtins.('undefined') = identifier('undefined', unique());

/* Unary Operators
 ******************************************************************************/
with
    unary = \op -> let
        xArg = identifier('x', unique())
    in
        setLocals(
            ast_expression.FunctionExpression.create(null, null,
                ast_pattern.ArgumentsPattern.create(null, null, [
                    ast_pattern.IdentifierPattern.create(null, xArg)]),
                op(xArg)),
            [getUid xArg]),
    
    unaryOp = \op ->
        unary\x ->
            ast_expression.UnaryExpression.create(null, op, x)
in {
    [
        ['typeof', '__typeof'],
        ['void', '__void'],
        ['~', '__bnot'],
        ['!', '__lnot'],
        ['++', '__plus'],
        ['--', '__minus']
    ].forEach \ [op name] -> {
        registerAliasedSymbol(op, name, unaryOp(op));
    };
}

/* Ternary Operator
 ******************************************************************************/
with
    ternaryOperator = let
        xArg = identifier('x', unique()),
        yArg = identifier('y', unique()),
        zArg = identifier('z', unique())
    in
        setLocals(
            ast_expression.FunctionExpression.create(null, null,
                ast_pattern.ArgumentsPattern.create(null, null, [
                    ast_pattern.IdentifierPattern.create(null,
                        xArg),
                    ast_pattern.IdentifierPattern.create(null,
                        yArg),
                        ast_pattern.IdentifierPattern.create(null,
                        zArg)]),
                ast_expression.ConditionalExpression.create(null,
                    xArg,
                    yArg,
                    zArg)),
            [getUid xArg, getUid yArg, getUid zArg])
in {
    registerAliasedSymbol('?', '__cond',
        ternaryOperator);
}

/* Binary Operators
 ******************************************************************************/
var binary = \op -> let
    xArg = identifier('x', unique()),
    yArg = identifier('y', unique())
in
    setLocals(
        ast_expression.FunctionExpression.create(null, null,
            ast_pattern.ArgumentsPattern.create(null, null, [
                ast_pattern.IdentifierPattern.create(null, xArg),
                ast_pattern.IdentifierPattern.create(null, yArg)]),
            op(xArg, yArg)),
        [getUid xArg, getUid yArg]);

var registerBinary = \op name impl -> {
    registerAliasedSymbol(op, name,
        binary(impl));
    
    registerAliasedSymbol('_' + op, name + 'r',
        binary(flip impl));
};

// Binary Operations
var binaryOp = \op ->
    \x y ->
        ast_expression.BinaryExpression.create(null, op, x, y);

[
    ['+', '__add'],
    ['-', '__sub'],
    ['*', '__mul'],
    ['/', '__div'],
    ['%', '__mod'],
    ['<<', '__blas'],
    ['>>', '__bras'],
    ['>>>', '__brls'],
    ['&', '__band'],
    ['^', '__bxor'],
    ['|', '__bor'],
    ['<', '__lt'],
    ['>', '__gt'],
    ['<=', '__lte'],
    ['>=', '__gte'],
    ['==', '__eq'],
    ['!=', '__neq'],
    ['===', '__seq'],
    ['!==', '__sneq'],
    ['instanceof', '__instanceof']
].forEach \ [op name] -> {
    registerBinary(op, name,
        binaryOp(op));
};

// Logical
with
    logicalOp = \op ->
        \x y ->
            ast_expression.LogicalExpression.create(null, op, x, y)
in {
    [
        ['||', '__or'],
        ['&&', '__and']
    ].forEach \ [op name] -> {
        registerBinary(op, name,
            logicalOp(op));
    };
}

// New
registerBinary('new', '__new', \x y ->
    ast_expression.NewExpression.create(null, x, [y]));

// Computed Member
registerBinary('.', '__dot', \x y ->
    ast_expression.MemberExpression.create(null, x, y, true));

// Curry
registerBinary('@', '__curry', \x y ->
    ast_expression.CurryExpression.create(null, x, [y]));

// Pipes
with
    pipe = \callee arg ->
        ast_expression.CallExpression.create(null,
            callee,
            [arg])
in {
    registerBinary('<|', '__pipe', pipe);
    registerBinary('|>', '__rpipe', flip pipe);
}

// Compose
with
    singleCompose = \f g -> let
        x = identifier('z', unique())
    in
        setLocals(
            ast_expression.FunctionExpression.create(null, null,
                ast_pattern.ArgumentsPattern.create(null, null, [
                    ast_pattern.IdentifierPattern.create(null,
                        x)]),
                ast_expression.CallExpression.create(null,
                    f, [
                        ast_expression.CallExpression.create(null,
                            g,
                            [x])])),
            [getUid x])
in {
    registerBinary('<\\', '__compose', singleCompose);
    registerBinary('\\>', '__rcompose',  flip singleCompose);
}

// ComposeN
with
    multiCompose = \f g -> let
        args = identifier('args', unique())
    in
        setLocals(
            ast_expression.FunctionExpression.create(null, null,
                ast_pattern.ArgumentsPattern.create(null,
                    ast_pattern.IdentifierPattern.create(null, args),
                    [],
                    null),
                ast_expression.CallExpression.create(null,
                    f, [
                        ast_expression.CallExpression.create(null,
                             ast_expression.MemberExpression.create(null,
                                 g,
                                 identifier('apply')),
                             [ast_value.Literal.create(null, 'null'),
                             args])])),
             [getUid args])
in {
    registerBinary('<<\\', '__composen', multiCompose);
    registerBinary('\\>>', '__rcomposen', flip multiCompose);
}

/* Macro Operators
 ******************************************************************************/
/**
 * Non computed member access.
 */
member = \id uid -> let
    xArg = identifier('x', uid)
in
    setLocals(
        ast_expression.FunctionExpression.create(null, null,
            ast_pattern.ArgumentsPattern.create(null, null, [
                ast_pattern.IdentifierPattern.create(null, xArg)]),
            ast_expression.MemberExpression.create(null, xArg, identifier id, false)),
        [getUid xArg]);
}