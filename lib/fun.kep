/**
 * @fileOverview
 */
package (
    id
    constant
    
    flip
    
    isArray
    
    reduce
    reduceRight
    foldl
    foldr
    
    concat
    filter
    forEach
    map
    
    flatten
    flattenr
    
    contains
    notContains
    arrayDiff)
{

/* 
 ******************************************************************************/
/**
 * Identity function
 */
id := \x -> x;

/**
 * Create function that returns `x`.
 */
constant = \x -> \ -> x;

/**
 * Flip binary function `f`.
 */
flip = \f -> \x y -> f(y, x);

/* Array Ops
 ******************************************************************************/
isArray := Array.isArray;

concat =  Array.prototype.concat.bind([]);

reduce = Function.prototype.call.bind(Array.prototype.reduce);

reduceRight = Function.prototype.call.bind(Array.prototype.reduceRight);

foldl = \f z a -> reduce(a, f, z);

foldr = \f z a -> reduceRight(a, f, z);

filter = \f a -> Array.prototype.filter.call(a, f);

forEach = Function.prototype.call.bind(Array.prototype.forEach);

map = \f a ->  Array.prototype.map.call(a, f);

/**
 * Flatten `x`.
 * 
 * Single pass, returns `x` if not array.
 */
flatten = \x ->
    ?isArray x
        :Array.prototype.concat.apply([], x.filter(id))
        :x;

/**
 * Recursively flatten `x`.
 */
flattenr = \x ->
    ?isArray x
        :flatten <| x.map(flattenr)
        :x;

/**
 * Does array `a` contain `x`?
 */
contains := \a x ->
    a.indexOf(x) >= 0;
    
/**
 * Does array `a` not contain `x`?
 */
notContains := (!) <<\ contains;

/**
 * Get `x` excluding any element in `y`.
 */
arrayDiff := \x y ->
    x.filter (notContains @ y);

}