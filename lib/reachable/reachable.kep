/**
 * @fileOverview Remove unused variables and bindings.
 * 
 * Walks the program tree in reverse order to find bindings that are never referenced.
 * This both optimizes the program, and is necessary after the inlining / constant
 * propogation phase, which makes many bindings unreachable but does not have
 * enough knowledge to be able to safely prune these.
 */
package removeUnreachable
with
    import 'khepri-ast::node' {modify},
    
    import 'akh::base' {
        'sequence': seq
        sequencea},
    import 'akh::state' StateM,

    import 'zipper-m::trans::tree' TreeZipperT,
    
    import '../fun' {
        flip
        map},
    import '../ast' {
        type
        getUd
        getUid},
    
    import './state' {Empty},
    import './m' Reachable
in {

var _check; // forward

var isReserved := getUd @ 'reserved';

var runReachable := \state c ctx ->
    StateM.evalState(
        TreeZipperT.runTreeZipperT(c, ctx),
        state);

var run = runReachable @ Empty;

/* Operations
 ******************************************************************************/
var M =  TreeZipperT (Reachable);

var pass = M.of null;

// Movement
////////////////////////////////////////
var extractCtx := M.get;

var inspect := (flip M.map) @ M.node;

var extract := M.chain @ M.node;

var set := M.setNode;

var up := M.up;
var down := M.down;
var left := M.left;

var rightmost := M.rightmost;

var moveChild := M.child;

/**
 * Move to a child along `edge` and perform a list of operations. Return to parent.
 */
var child = \edge ...actions ->
    seq(
        moveChild edge,
        sequencea actions,
        up);

/**
 * When `test` is true for current node, evaluate consequent. Otherwise evaluate
 * alternate.
 */
var when := \test consequent alternate ->
    extract \ node ->
        ?test node
            :consequent
            :(alternate || pass);

// Bindings Operations
////////////////////////////////////////
/**
 * Increment the reference count for `uid`.
 */
var addReference := M.lift <\ M.inner.addReference;

/**
 * If `uid` is reacahble (reference count > 0), execute `yes`. Otherwise do `no`.
 */
var isReachable := \test yes no ->
    test.chain \ uid ->
        M.lift(M.inner.isReachable(uid)).chain \ reachable ->
            ?reachable : yes : no;

/**
 * Remove a binding.
 */
var removeBinding := set [];

// Check Operations
////////////////////////////////////////
/**
 * Rewrite the current node.
 */
var checkTop := extract \ x -> { return _check x; }; // forward

/**
 * Rewrite a child node.
 */
var visitChild := \edge ->
    child(edge,
        checkTop);

/**
 * Visit an array node in reverse order.
 */
var visitArray := let
    move = \x i ->
        ?i
            :seq(checkTop, left)
            :checkTop
in
    \node ->
        ?node.length
            :seq(
                down,
                rightmost,
                sequencea map(move, node).reverse(),
                up)
        :pass;

/* Visit
 ******************************************************************************/
var peepholes := { };

var addRewrite := \type f -> {
    if (Array.isArray type)
        type.forEach \ type -> addRewrite(type, f);
    else
        peepholes.(type) = f;
};

/* Checks
 ******************************************************************************/
// Program and Packages
addRewrite@'Program' <|
    visitChild 'body';

addRewrite@'Package' <| seq(
    visitChild 'exports', // mark all exports reachable before visiting body
    visitChild 'body');

addRewrite@'PackageExports' <|
    visitChild 'exports';

addRewrite@'PackageExport' <|
    visitChild 'id';

// Clause
addRewrite@'SwitchCase' <| seq(
    visitChild 'test',
    visitChild 'consequent');

addRewrite@'CatchClause' <| seq(
    visitChild 'param',
    visitChild 'body');

// Declarations
addRewrite@'VariableDeclaration' <|
    visitChild 'declarations';

addRewrite@'VariableDeclarator' <|
    isReachable(inspect (.id \> getUid),
        visitChild 'init',
        removeBinding);

addRewrite@'Binding' <|
    when(isReserved,
        // Never prune reserved bindings.
        visitChild 'value',
        
        isReachable(inspect (.pattern.id \> getUid),
            visitChild 'value',
            removeBinding));

// Statement
addRewrite@'BlockStatement' <|
    visitChild 'body';

addRewrite@'ExpressionStatement' <|
    visitChild 'expression';

addRewrite@'WithStatement' <| seq(
    visitChild 'body',
    visitChild 'bindings');

addRewrite@'SwitchStatement' <| seq(
    visitChild 'discriminant',
    visitChild 'cases');

addRewrite@['ReturnStatement', 'ThrowStatement'] <|
    visitChild 'argument';

addRewrite@'TryStatement' <| seq(
    visitChild 'block',
    visitChild 'handler',
    visitChild 'finalizer');

addRewrite@['WhileStatement', 'DoWhileStatement'] <| seq(
    visitChild 'test',
    visitChild 'body');

addRewrite@'ForStatement' <| seq(
    visitChild 'body',
    visitChild 'update',
    visitChild 'test',
    visitChild 'init');

addRewrite@['ConditionalExpression', 'IfStatement'] <| seq(
    visitChild 'test',
    visitChild 'consequent',
    visitChild 'alternate');

addRewrite@'FunctionExpression' <| seq(
    visitChild 'body',
    visitChild 'id',
    visitChild 'params');

addRewrite@['UnaryExpression', 'DeleteExpression'] <|
    visitChild 'argument';

addRewrite@['BinaryExpression', 'AssignmentExpression'] <| seq(
    visitChild 'left',
    visitChild 'right');

addRewrite@['MemberExpression', 'CheckedMemberExpression'] <| seq(
    visitChild 'object',
    when((.computed),
        visitChild 'property'));

addRewrite@['CallExpression', 'NewExpression', 'ApplyExpression'] <| seq(
    visitChild 'callee',
    visitChild 'args');

addRewrite@'CurryExpression' <| seq(
    visitChild 'base',
    visitChild 'args');

addRewrite@'OperatorExpression' <|
    visitChild 'operator';

addRewrite@'LetExpression' <| seq(
    visitChild 'body',
    visitChild 'bindings');

// Unpack
addRewrite@['SliceUnpack', 'RelativeUnpack'] <|
    visitChild 'target';

addRewrite@'ArgumentsPattern' <|
    // Try to prune the arguments binding.
    when(.id,
        isReachable(inspect (.id.id \> getUid),
            pass,
            extract \ node ->
                set modify(node, { id: null })));

// Value
addRewrite@'ArrayExpression' <|
    visitChild 'elements';

addRewrite@'ObjectExpression' <|
    visitChild 'properties';

addRewrite@'ObjectValue' <|
    visitChild 'value';

addRewrite@'Identifier' <|
    extract (getUid \> addReference);

/* Interface
 ******************************************************************************/
_check = \node ->
    ?Array.isArray node
        :visitArray node
        :peepholes.(type node) || pass;

/**
 * Traverse Khepri zipper `ast`, removing any bindings that are not reachable.
 * 
 * Outputs rewritten zipper.
 * 
 * @param ast Khepri zipper.
 */
removeUnreachable = run @ seq(checkTop, extractCtx);

}