/**
 * @fileOverview Simple reachability tracker.
 * 
 * Maps uids to reference count.
 */
package (
    empty
    
    addReference
    getCount
    isReachable)
with
    import 'hamt' hamt,
    import 'bes::record' record,
    
    import '../ast' {
        getUd
        getUid}
in {

var isUserDefined := getUd @ 'userDefined';

var State := record.declare @ null [
    'references',
    'prune']; 

/**
 * Empty state.
 */
empty := State.create(hamt.empty, false);

/**
 * Increment  reference count to `uid`.
 * 
 * @param uid Key
 * @param s State.
 */
addReference = let
    inc = \x -> (x + 1 || 1)
in
    \uid s ->
        s.setReferences(hamt.modify(uid, inc, s.references));

/**
 * Get the reference count for `uid`.
 * 
 * @param uid Key
 * @param s State.
 */
getCount := \uid s ->
    (hamt.get(uid, s.references) || 0);

/**
 * Is `uid` reachable?
 * 
 * @param id Node
 * @param s State.
 */
isReachable := \id s ->
    getCount(getUid id, s) || (!s.prune && isUserDefined id);

}