/**
 * @fileOverview
 */
package (
    definePackage
    defineProgram
    importPackage)
with
    import 'khepri-ast::declaration' ast_declaration,
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::statement' ast_statement,
    import 'khepri-ast::program' ast_program,
    import 'khepri-ast::value' ast_value,
   
    import '../../fun' fun,
    import '../../builtin' {builtins}
in {

var concat = Array.prototype.concat.bind([]);
var map = Function.prototype.call.bind(Array.prototype.map);

/* Package Manager
 ******************************************************************************/
/**
 * 
 */
defineProgram = \body -> 
    ast_program.Program.create(null,
        fun.concat(
            ast_statement.ExpressionStatement.create(null,
                ast_value.Literal.create(null, 'string', "use strict")),
            body));

/**
 * Node import code generator.
 * 
 * @param path {string} Path to package to import.
 */
importPackage = \path -> let
    segs = path.split('::')
in
    segs.slice(1).reduce(
        \p c ->
            ast_expression.MemberExpression.create(null,
                p,
                ast_value.Literal.create(null, 'string', c),
                true),
        ast_expression.CallExpression.create(null,
            builtins.require, [
            ast_value.Literal.create(null, 'string', segs.(0))]));

/**
 * Node package definition code generator.
 */
definePackage = \loc exports imports targets body -> let
    exportedNames = ?exports.type === 'PackageExports'
        :fun.map(\x -> x.id.name, exports.exports)
        :[exports.id.name],

    exportHeader = ast_declaration.VariableDeclaration.create(null,
        map(exportedNames, \x ->
            ast_declaration.VariableDeclarator.create(null,
                ast_value.Identifier.create(null, x)))),
    
    exportBody = ?exports.type === 'PackageExports'
        :map(exports.exports, \x ->
            ast_statement.ExpressionStatement.create(null,
                ast_expression.AssignmentExpression.create(null, '=',
                    ast_expression.MemberExpression.create(null,
                        ast_value.Identifier.create(null, 'exports'),
                        x.alias,
                        true),
                    x.id)))
        :ast_statement.ExpressionStatement.create(null,
                ast_expression.AssignmentExpression.create(null, '=',
                    ast_expression.MemberExpression.create(null,
                        ast_value.Identifier.create(null, 'module'),
                        ast_value.Identifier.create(null, 'exports')),
                    exports.id))
in
    ast_statement.BlockStatement.create(loc, [
        ast_statement.ExpressionStatement.create(null,
            ast_value.Literal.create(null, 'string', "use strict")),
        ast_statement.WithStatement.create(null,
            map(imports, \x ->
                ast_declaration.Binding.create(null,
                    x.pattern,
                    importPackage(x.from.value))),
            ast_statement.BlockStatement.create(null,
                concat(
                    exportHeader,
                    body,
                    exportBody)))]);

}