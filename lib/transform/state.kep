/**
 * @fileOverview Transformer state.
 */
package (
    State
    
    getBindings
    addBindings
    pushBindings
    popBindings)
with 
    import 'bes::record' record,
    
    import 'nu-stream::stream' stream#{
        append
        first
        rest
        cons
        NIL
        toArray},
    
    import '../lexical/scope' scope#{Scope}
in {

/* State
 ******************************************************************************/
/**
 * @member scope True scope of the generated ECMAScript program.
 * @member packageManager Package manager code generators.
 * @member bindings List of bindings without variable declarations in the current
 *   scope.
 */
State = record.declare(null, [
    'scope',
    'packageManager',
    'bindings']);

State.empty = State.create(
    Scope.empty,
    null,
    cons(NIL, NIL));

/* Binding Operations
 ******************************************************************************/
/**
 * Get array of current bindings.
 * 
 * @param s State.
 */
getBindings := (.bindings) \> first \> toArray;

/**
 * Add a set of bindings.
 * 
 * @param bindings Array of bindings.
 * @param s State.
 */
addBindings := \bindings s ->
    s.setBindings <|
        cons(
            append(first s.bindings, stream.from bindings),
            rest s.bindings);

/**
 * Enter a new bindings scope.
 * 
 * @param s State.
 */
pushBindings = \s ->
    s.setBindings <|
        cons(NIL, s.bindings);

/**
 * Exit the current binding scope.
 * 
 * @param s State.
 */
popBindings := \s ->
    s.setBindings <|
        rest s.bindings;

}