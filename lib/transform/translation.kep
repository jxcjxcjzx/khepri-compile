/**
 * @fileOverview Translations of Khepri elements to ECMAScript.
 */
package (
    useStrict
        
    identifier
    
    program
    
    variableDeclaration
    variableDeclarator
    
    assignmentExpression
    deleteExpression
    unaryExpression
    binaryExpression
    logicalExpression
    conditionalExpression
    newExpression
    callExpression
    applyExpression
    memberExpression
    checkedMemberExpression
    arrayExpression
    objectExpression
    objectValue
    
    functionExpression
    functionExpressionPost
    explicitClosure
    letExpression
    curryExpression
    
    catchClause
    switchCase
    
    emptyStatement
    blockStatement
    withStatement
    expressionStatement
    returnStatement
    throwStatement
    breakStatement
    continueStatement
    ifStatement
    switchStatement
    forStatement
    doWhileStatement
    whileStatement
    tryStatement
    
    packageBlock)
with 
    import 'ecma-ast::clause' ecma_clause,
    import 'ecma-ast::declaration' ecma_declaration,
    import 'ecma-ast::expression' ecma_expression,
    import 'ecma-ast::node' ecma_node,
    import 'ecma-ast::program' ecma_program,
    import 'ecma-ast::statement' ecma_statement,
    import 'ecma-ast::value'ecma_value,
    
    import 'khepri-ast::declaration' khepri_declaration,
    import 'khepri-ast::expression' khepri_expression,
    import 'khepri-ast::pattern' khepri_pattern,
    import 'khepri-ast::statement' khepri_statement,
    import 'khepri-ast::value' khepri_value,
    
    import '../ast' {
        type
        tryGetUd
        getUd
        setUd
        setUid},
    import '../fun' fun#{
        concat
        flatten
        flip
        filter
        map
        reduce},
    import './unpack' {
        expandBinding
        expandArgumentsPattern}
in {

var reservedEcmaIdentifiers := [
    'break', 'case', 'catch', 'continue', 'debugger', 'default', 'delete', 
    'do', 'else', 'finally', 'for', 'function', 'if', 'in', 'instanceof', 
    'typeof', 'new', 'var', 'return', 'void', 'switch', 'while', 'this', 
    'with', 'throw', 'try', 'class', 'enum', 'extends', 'super', 'const',
    'export', 'import', 'implements', 'let', 'private', 'public', 'interface',
    'package', 'protected', 'static', 'yield',
    'true', 'false', 'null']; 

var isReserved := \name -> 
    reservedEcmaIdentifiers.indexOf name >= 0;

useStrict :=
    ecma_statement.ExpressionStatement.create(null,
        ecma_value.Literal.create(null, 'string', "use strict"));

/* Values
 ******************************************************************************/
identifier = \loc, name uid ->
    setUid(
        uid,
        ecma_value.Identifier.create(loc, name));

/* Declaration
 ******************************************************************************/
variableDeclaration = \node ->
    ecma_declaration.VariableDeclaration.create(
        node.loc,
        node.declarations);

variableDeclarator = \node ->
    ecma_declaration.VariableDeclarator.create(
        node.loc,
        node.id,
        node.init);

var idsToDeclarators :=
    map @ \x ->
        x && ecma_declaration.VariableDeclarator.create(null,
            identifier(null, x)) ยง
    \> ecma_declaration.VariableDeclaration.create @ null;

/* Unpacks
 ******************************************************************************/
/**
 * Convert a binding to a variable declarator.
 */
var bindingToDeclarator = \x ->
    ecma_declaration.VariableDeclarator.create(null,
        x.pattern.id,
        x.value);

/**
 * Expand a binding to a list of variable declarations.
 */
var unpack = expandBinding \> map @ bindingToDeclarator;

/**
 * Expand a binding to a list of assignments.
 */
var unpackAssign =
    expandBinding
    \> map @ \x ->
        ecma_expression.AssignmentExpression.create(null, '=', x.pattern.id, x.value);

/* Program
 ******************************************************************************/
program := \bindings node ->
    ecma_program.Program.create(node.loc,
        concat(
            tryGetUd([], 'prefix', node),
            idsToDeclarators(bindings),
            node.body));

/* Expressions
 ******************************************************************************/
assignmentExpression := \node ->
    ecma_expression.AssignmentExpression.create(node.loc,
        '=',
        node.left,
        node.right);

deleteExpression := \node ->
    ecma_expression.UnaryExpression.create(node.loc,
        'delete',
        node.argument);

unaryExpression := let
    mapOp := \op -> {
        switch (op) {
        case '++': return '+';
        case '--': return '-';
        default: return op;
        }
    }
in
    \node ->
        ecma_expression.UnaryExpression.create(node.loc,
            mapOp(node.operator),
            node.argument);

binaryExpression := \node ->
    ecma_expression.BinaryExpression.create(node.loc,
        node.operator,
        node.left,
        node.right);

logicalExpression := \node ->
    ecma_expression.LogicalExpression.create(node.loc,
        node.operator,
        node.left,
        node.right);

conditionalExpression := \node ->
    ecma_expression.ConditionalExpression.create(node.loc,
        node.test,
        node.consequent,
        node.alternate);

newExpression := \ node ->
    ecma_expression.NewExpression.create(node.loc,
        node.callee,
        node.args);

callExpression := \node ->
    ecma_expression.CallExpression.create(node.loc,
        node.callee,
        node.args);

applyExpression := \{callee args} ->
    ecma_expression.CallExpression.create(null,
        ecma_expression.MemberExpression.create(null,
             callee,
             identifier(null, 'apply')),
         [ecma_value.Literal.create(null, 'null'), args]);

memberExpression := \{loc object property computed} ->
    ?!computed && type property === 'Identifier' && isReserved property.name
        :ecma_expression.MemberExpression.create(loc,
            object,
            ecma_value.Literal.create(property.loc, 'string', property.name),
            true)
        :ecma_expression.MemberExpression.create(loc,
            object,
            property,
            computed);

checkedMemberExpression := \node -> let
    id = node.id
in
    khepri_expression.BinaryExpression.create(null, '&&',
        id,
        khepri_expression.MemberExpression.create(null,
            id,
            node.property,
            node.computed));

letExpression = \node ->
    ecma_expression.SequenceExpression.create(node.loc,
        flatten concat(
            map(unpackAssign, node.bindings),
            node.body));

curryExpression = \node ->
    ecma_expression.CallExpression.create(node.loc,
        ecma_expression.MemberExpression.create(null,
            node.base,
            identifier(null, 'bind')),
        concat(
            ecma_value.Literal.create(null, 'null', null),
            node.args));

/**
 * Function Expression Normalization.
 */
functionExpression = \loc id parameters functionBody prefix -> let
    params = parameters.elements,
    
    bindings = expandArgumentsPattern(parameters, ecma_expression.ThisExpression.create(null))
        |> map @ bindingToDeclarator,
    
    body = ?type functionBody === "BlockStatement"
        :functionBody.body
        :khepri_statement.ReturnStatement.create(null, functionBody)
in
    khepri_expression.FunctionExpression.create(loc,
        id,
        params,
        khepri_statement.BlockStatement.create(body.loc,
            concat(
                (prefix || []),
                ecma_declaration.VariableDeclaration.create(null, bindings),
                body)));

functionExpressionPost = \node ->
    ecma_expression.FunctionExpression.create(null,
        node.id,
        node.params,
        node.body);

explicitClosure = \locals node ->
    ecma_expression.CallExpression.create(null,
        ecma_expression.FunctionExpression.create(null,
            null,
            locals,
            ecma_statement.BlockStatement.create(null, [
                ecma_statement.ReturnStatement.create(null, node)])),
        locals);

arrayExpression = \node ->
    ecma_expression.ArrayExpression.create(node.loc,
        node.elements);

objectExpression = \node ->
    ecma_expression.ObjectExpression.create(node.loc,
        node.properties);

objectValue = \{loc key value} ->
    ecma_value.ObjectValue.create(loc,
        ?type key === 'Identifier' && isReserved key.name
            :ecma_value.Literal.create(key.loc, 'string', key.name)
            :key,
        value);


/* Clause
 ******************************************************************************/
catchClause = \node ->
    ecma_clause.CatchClause.create(node.loc,
        node.param,
        node.body);

switchCase := \node ->
    ecma_clause.SwitchCase.create(node.loc,
        node.test,
        node.consequent);

/* Translations
 ******************************************************************************/
/**
 * 
 */
emptyStatement := \node ->
    ecma_statement.EmptyStatement.create(node.loc);

/**
 * 
 */
blockStatement := \bindings node ->
    ecma_statement.BlockStatement.create(node.loc,
        concat(
            idsToDeclarators(bindings),
            node.body));

/**
 * With statement translation.
 */
withStatement = \node -> let
    vars = flatten map(unpack, node.bindings),
    
    prefix = ecma_declaration.VariableDeclaration.create(null, vars)
in
    ecma_statement.BlockStatement.create(node.loc,
        concat(
            prefix,
            node.body.body));

expressionStatement := \node ->
    ecma_statement.ExpressionStatement.create(node.loc,
        node.expression);

ifStatement := \node ->
    ecma_statement.IfStatement.create(node.loc,
        node.test,
        node.consequent,
        node.alternate);

switchStatement := \node ->
    ecma_statement.SwitchStatement.create(node.loc,
        node.discriminant,
        node.cases);

returnStatement := \node ->
    ecma_statement.ReturnStatement.create(node.loc,
        node.argument);

throwStatement := \node ->
    ecma_statement.ThrowStatement.create(node.loc,
        node.argument);

breakStatement := \node ->
    ecma_statement.BreakStatement.create(node.loc,
        null);

continueStatement := \node ->
    ecma_statement.ContinueStatement.create(node.loc,
        null);

tryStatement := \node ->
    ecma_statement.TryStatement.create(node.loc,
        node.block,
        node.handler,
        node.finalizer);

whileStatement := \node ->
    ecma_statement.WhileStatement.create(node.loc,
        node.test,
        node.body);

doWhileStatement := \node ->
    ecma_statement.DoWhileStatement.create(node.loc,
        node.body,
        node.test);

forStatement := \node ->
    ecma_statement.ForStatement.create(node.loc,
        node.init,
        node.test,
        node.update,
        node.body);

/* Package
 ******************************************************************************/
packageBlock := let
    filterImports =
        filter @ ((.value) \> type \> (=== 'Import')),
    
    getImports =
        filter @ ((.value) \> type \> (!== 'Import'))
in
    \packageManager {loc exports body} -> let
        imports =
            ?type body === 'WithStatement'
                :filterImports body.bindings
                :[],
        
        targets =
            reduce(imports, \p c -> {
                p.(c.value.from) = c.pattern.id;
                return p;
            }, {}),
        
        fBody =
            ?type body === 'WithStatement'
                :khepri_statement.WithStatement.create(null,
                    getImports body.bindings,
                    body.body)
                :body
    in
        packageManager.definePackage(loc,
            exports,
            imports,
            targets,
            fBody);

}