/**
 * @fileOverview Khepri peephole optimization.
 */
package (
    optimize)
with
    import 'bes::record' record,

    import 'hamt' hamt,
    
    import 'neith::zipper' zipper,
    
    import 'khepri-ast::node' {Node setData},
    
    import 'akh::base' {
        next
        'sequence': seq
        'sequencea': seqa},
    
    import 'akh::state' StateM,

    import 'zipper-m::trans::tree' TreeZipperT,
    
    import './ast' {
        type
        getUid}
in {

/* State
 ******************************************************************************/
var State = record.declare(null, [
    'bindings']);

State.empty = State.create(hamt.empty);

State.prototype.setReference = \uid count={bindings}->
    State.create(
        hamt.set(uid, count, bindings));

State.prototype.addReference = \uid ={bindings}->
    State.create(
        hamt.modify(uid, \x -> (x + 1 || 1), bindings));

State.prototype.isReachable = State.prototype.getCount = \uid ={bindings}->
    hamt.get(uid, bindings);

/* Forward
 ******************************************************************************/
var _check;

var M = TreeZipperT (StateM);

var run = \c ctx ->
    StateM.evalState(
        TreeZipperT.runTreeZipperT(c, ctx),
        State.empty);

var pass = M.of null;

// State Operations
////////////////////////////////////////
var getState := M.lift (M.inner.get);

var modifyState := M.lift <\ M.inner.modify;

// Bindings Operations
////////////////////////////////////////
var addReference = \uid ->
    ?uid
        :modifyState \ s ->
            s.addReference(uid)
        :pass;

var setCount = \uid count ->
    ?uid
        :modifyState \ s ->
            s.setReference(uid, count)
        :pass;

var getCount = \uid yes no ->
    ?uid
        :getState.map \ s -> s.getCount(uid)
    :M.of 0;

var isReachable = \uid yes no ->
    ?uid
        :getState.chain \ s ->
            ?s.isReachable(uid) : yes : no
    :yes;

// Movement
////////////////////////////////////////
var extractCtx := M.get;

var extract := M.chain @ M.node;

var modify := M.modifyNode;
var set := M.setNode;

var up := M.up;
var down := M.down;
var left := M.left;

var rightmost := M.rightmost;

var moveChild := M.child;

/**
 * When `test` is true for current node, evaluate consequent. Otherwise evaluate
 * alternate.
 */
var when := \test consequent alternate ->
    extract \ node ->
        ?test node
            :consequent
            :(alternate || pass);

/*
 ******************************************************************************/
/**
 * Move to a child along `edge` and perform a list of operations. Return to parent.
 */
var child = \edge ...actions ->
    seq(
        moveChild edge,
        seqa actions,
        up);

/**
 * Rewrite the current node.
 */
var checkTop := extract \ x -> { return _check x; }; // forward

/**
 * Rewrite a child node.
 */
var visitChild := \edge ->
    child(edge,
        checkTop);

/*
 ******************************************************************************/
var peepholes := {};

var addRewrite := \type f -> {
    if (Array.isArray type)
        type.forEach \ type -> addRewrite(type, f);
    else
        peepholes.(type) = f;
};

/* Checks
 ******************************************************************************/
// Program and Packages
addRewrite@'Program' <|
    visitChild 'body';

addRewrite@'Package' <| seq(
    visitChild 'exports', // mark all exports reachable before visiting body
    visitChild 'body');

addRewrite@'PackageExports' <|
    visitChild 'exports';

addRewrite@'PackageExport' <|
    visitChild 'id';

// Clause
addRewrite@'SwitchCase' <| seq(
    visitChild 'test',
    visitChild 'consequent');

addRewrite@'CatchClause' <| seq(
    visitChild 'param',
    visitChild 'body');

// Declarations
addRewrite@'VariableDeclaration' <|
    visitChild 'declarations';

addRewrite@'VariableDeclarator' <|
    extract \ node ->
        isReachable(getUid node.id,
            visitChild 'init',
            set []);

addRewrite@'Binding' <|
    extract \ node ->
        isReachable(getUid node.pattern.id,
            visitChild 'value',
            set []);

// Statement
addRewrite@'BlockStatement' <|
    visitChild 'body';

addRewrite@'ExpressionStatement' <|
    visitChild 'expression';

addRewrite@'WithStatement' <| seq(
    visitChild 'body',
    visitChild 'bindings');

addRewrite@'SwitchStatement' <| seq(
    visitChild 'discriminant',
    visitChild 'cases');

addRewrite@['ReturnStatement', 'ThrowStatement'] <|
    visitChild 'argument';

addRewrite@'TryStatement' <| seq(
    visitChild 'block',
    visitChild 'handler',
    visitChild 'finalizer');

addRewrite@['WhileStatement', 'DoWhileStatement'] <| seq(
    visitChild 'test',
    visitChild 'body');

addRewrite@'ForStatement' <| seq(
    visitChild 'body',
    visitChild 'update',
    visitChild 'test',
    visitChild 'init');

addRewrite@['ConditionalExpression', 'IfStatement'] <| seq(
    visitChild 'test',
    visitChild 'consequent',
    visitChild 'alternate');

addRewrite@'FunctionExpression' <| seq(
    visitChild 'id',
    visitChild 'params',
    visitChild 'body');

addRewrite@'UnaryExpression' <|
    visitChild 'argument';

addRewrite@['LogicalExpression', 'BinaryExpression'] <| seq(
    visitChild 'left',
    visitChild 'right');

addRewrite@'AssignmentExpression' <| seq(
    visitChild 'left',
    visitChild 'right');

addRewrite@'MemberExpression' <| seq(
    visitChild 'object',
    when((.computed),
        visitChild 'property'));

addRewrite@'NewExpression' <| seq(
    visitChild 'callee',
    visitChild 'args');

addRewrite@'CallExpression' <| seq(
    visitChild 'callee',
    visitChild 'args');

addRewrite@'CurryExpression' <| seq(
    visitChild 'base',
    visitChild 'args');

addRewrite@'LetExpression' <| seq(
    visitChild 'body',
    visitChild 'bindings');

// Unpack
addRewrite@'ArgumentsPattern' <|
    visitChild 'id';

// Value
addRewrite@'ArrayExpression' <|
    visitChild 'elements';

addRewrite@'ObjectExpression' <|
    visitChild 'properties';

addRewrite@'ObjectValue' <|
    visitChild 'value';

addRewrite@'Identifier' <|
    extract (getUid \> addReference);

/* Interface
 ******************************************************************************/
_check = \node -> {
    if (Array.isArray node) {
        if (!node.length) return pass;
        
        // Visit all elements of array in reverse order, from right to left.
        return seq(
            down,
            rightmost,
            node.reduceRight(\p c i ->
                next(
                    p,
                    ?i
                        :next(checkTop, left)
                        :checkTop),
                pass),
            up);
    }
    
    if (node instanceof Node && peepholes.(node.type))
        return peepholes.(node.type);
    
    return pass;
};

/**
 * 
 */
optimize = \ast data ->
    run(
        next(
            checkTop,
            extractCtx.chain \ node ->
                M.of({
                    'tree': node
                })),
        ast);

}