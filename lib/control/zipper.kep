package Zipper
with
    import 'akh::trans::state' StateT,
    import 'akh::state' State,
    import 'akh::trans::identity' IdentityT,
    
    import 'neith::zipper' zipper,
    import 'neith::tree' tree
in {

/* Monad
 ******************************************************************************/
Zipper = IdentityT(State);

var lift = Zipper.lift;

/* Operations
 ******************************************************************************/
/**
 * Get the current zipper.
 */
Zipper.extract = lift (State.get);
 
/**
 * Call `f` with the current zipper and continue with result of `f`.
 */
Zipper.inspect = Zipper.extract.chain.bind(Zipper.extract);

/**
 * Modify the current zipper.
 */
Zipper.move = lift <\ State.modify;


Zipper.up = Zipper.move zipper.up;
Zipper.down = Zipper.move zipper.down;
Zipper.left = Zipper.move zipper.left;
Zipper.right = Zipper.move zipper.right;

Zipper.modifyNode = \f -> Zipper.move tree.modifyNode @ f;

Zipper.setNode = \x -> Zipper.move tree.setNode @ x;

Zipper.run = \m ctx ->
    State.evalState(
        IdentityT.runIdentityT(m),
        ctx);

}