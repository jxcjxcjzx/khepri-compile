/**
 * @fileOverview Pre-lexical check tree normalization.
 * 
 * This stage expands shorthand like the array unpack, but does not move or
 * remove nodes.
 */
package (
    normalize)
with
    import 'khepri-ast-zipper' {khepriZipper},
    
    import 'khepri-ast::node' {modify setData},
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::pattern' ast_pattern,
    import 'khepri-ast::package' ast_package,
    import 'khepri-ast::value' ast_value,
    
    import './pseudo/pattern' {SliceUnpack RelativeUnpack},

    
    import './ast' {type},
    
    import './fun' {
        concat
        map
        foldl
        foldr
        flatten},
    import './rewriter' {
        UP
        DOWN
        Rewriter
        rewrite}
in {

var string = ast_value.Literal.create @ (null, 'string');
var number = ast_value.Literal.create @ (null, 'number');


var peepholes = new Rewriter();

/* Package Normalizations
 ******************************************************************************/
/**
 * Add aliases to all package exports
 */
peepholes.add('PackageExport', UP,
    \node ->
        !node.alias,
    
    \node ->
        ast_package.PackageExport.create(node.loc,
            node.id,
            string(node.id.name)));

/* Expression Expansions
 ******************************************************************************/
/**
 * Convert multiple binding let expression to nested single binding let expressions
 */
peepholes.add('LetExpression', UP,
    \node ->
        node.bindings.length > 1,
    
    \{bindings body} ->
        foldr(
            \p c ->
                ast_expression.LetExpression.create(null, [c], p),
            body,
            bindings));

/**
 * Expand currying with multiple args to nested single arg curries curries.
 */
peepholes.add('CurryExpression', DOWN,
    \node ->
        node.args.length > 1,
    
    \{base args} ->
        foldl(
            \p arg -> 
                ast_expression.CurryExpression.create(null, p, [arg]),
            base,
            args));

/* Pattern Normalizations
 ******************************************************************************/
var splitArrayPattern = \elements -> let
    indx = elements.map(type).indexOf('EllipsisPattern')
in
    ?indx < 0
        :[elements, null, []]
        :[elements.slice(0, indx), elements.(indx), elements.slice(indx + 1)];

/**
 * Convert array patterns to object patterns
 */
peepholes.add('ArrayPattern', DOWN,
    \_ -> true,
    
    \node#{loc elements} -> let
        [pre mid post] = splitArrayPattern elements
    in
        ast_pattern.ObjectPattern.create(loc,
            flatten <| concat(
                map(
                    \x i -> ast_pattern.ObjectPatternElement.create(null, number i, x),
                    pre),
                ?mid && mid.id
                    :SliceUnpack.create(null, mid.id, pre.length, post.length)
                    :[],
                map(
                    \x i -> RelativeUnpack.create(null, x, i, post.length),
                    post))));

/**
 * Normalize object patterns to ('key': pattern) form.
 */
peepholes.add('ObjectPatternElement', DOWN,
    \node ->
        !node.target,
    
    \node#{key} -> {
        switch(key.type) {
        case 'IdentifierPattern':
            return ast_pattern.ObjectPatternElement.create(node.loc,
                string(key.id.name),
                key);
        
        case 'AsPattern':
            return ast_pattern.ObjectPatternElement.create(node.loc,
                string(key.id.id.name),
                key);
        
        default:
            return node;
        }
    });

/**
 * When generating unpacks lists, we want to use the 
 * as pattern name if possible instead of the auto generated name.
 */
peepholes.add('AsPattern', DOWN,
    \node ->
        !node.target.ud || !node.target.ud.id,
    
    \node ->
        ast_pattern.AsPattern.create(node.loc,
            node.id,
            setData(node.target, 'id', node.id)));

/**
 * Name anon object patterns.
 * 
 * This uses the identifier `__o`, which is marked reserved so the lexical check
 * does not complain if it is not unique.
 */
peepholes.add('ObjectPattern', UP,
    \node ->
        !node.ud || !node.ud.id,
    
    \node -> let
        id = setData(
            ast_pattern.IdentifierPattern.create(null,
                ast_value.Identifier.create(null, '__o')),
            'reserved',
            true)
    in
        ast_pattern.AsPattern.create(null,
            id,
            setData(node, 'id', id)));

/**
 * Make sure all arguments patterns that use an ellipisis have an argument name.
 */
peepholes.add('ArgumentsPattern', UP,
    \node ->
        !node.id && node.elements.map(type).indexOf('EllipsisPattern') >= 0,
    
    \node -> let
        id = setData(
            ast_pattern.IdentifierPattern.create(null,
                ast_value.Identifier.create(null, '__args')),
            'reserved',
            true)
    in
        setData(
            modify(node, {'id': id}, {}),
            'id',
            id));


/* Interface
 ******************************************************************************/
normalize = khepriZipper \> rewrite @ peepholes;

}