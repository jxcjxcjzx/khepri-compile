/**
 * @fileOverview 
 */
package (
    Scope

// Binding Ops
    hasBinding
    hasMutableBinding
    hasTransMutableBinding
    
    addTransMutableBinding
    addMutableBinding
    addImmutableBinding
    markBindingImmutable
    markBindingMutable
    
// Definition Ops
    getUid
    addUid
    
// Mapping Ops
    hasMapping
    hasOwnMapping
    getMapping
    addMapping
    
    getLocals
    getClosure
    addRef
    
    addOperator
    getOperators
    
    push
    pop
    
    addVar)
with
    import 'bes::record' record,
    
    import 'hamt' hamt
in {

var IMMUTABLE := 0, // Immutable binding.
    TRANS := 1,     //Mutable binding that may later be marked immutable.
    MUTABLE := 2;   // Mutable binding.

/* Scope
 ******************************************************************************/
/**
 * Lexical scope information.
 * 
 * @member record Maps identifiers to binding records
 * @member outer Parent scope.
 * @member mapping Maps internal identifiers to symbols.
 * @member definitions Maps identifiers to unique ids.
 * @member locals Set of all unique ids that are valid in the current scope.
 * @member closure Set of all unique ids references in the current scope.
 * @member prefixOps Map of all valid prefix operator names to uids in the scope.
 */
Scope := record.declare(null, [
    'record',
    'outer',
    'mapping',
    'definitions',
    'locals',
    'closure',
    'prefixOps']);

Scope.empty := Scope.create(
    hamt.empty,
    null,
    hamt.empty,
    hamt.empty,
    hamt.empty,
    hamt.empty);

/* Binding Operations
 ******************************************************************************/
/**
 * Does this scope have a binding for `id`?
 */
Scope.prototype.hasOwnBinding := \id ={record}->
    hamt.has(id, record);

/**
 * Does scope `s` or its parents have a given binding for `id`?
 */
hasBinding := \id s->
    (  s.hasOwnBinding(id)
    || (s.outer && hasBinding(id, s.outer)));

/**
 * Does scope `s` or its parents have a mutable binding for `id`?
 */
hasMutableBinding := \id s -> let
    binding := s.getBinding(id)
in
    (binding??.mutable);

/**
 * Does scope `s` or its parents have a mutable binding for `id`?
 */
hasTransMutableBinding := \id s -> let
    binding := s.getBinding(id)
in
    (binding??.mutable === TRANS);

/**
 * Get information for a given binding.
 * 
 * Returns null if binding does not exist.
 */
Scope.prototype.getBinding := \id =self->
    (  hamt.get(id, self.record)
    || ?self.outer
        :self.outer.getBinding(id)
        :null);

/**
 * Get an unused identifier in this scope.
 */
Scope.prototype.getUnusedId := \id =self-> {
    if (!hasBinding(id, self))
        return id;
    
    for (var i = 0; ; i = i + 1)
        if (!hasBinding(id + i, self))
            return id + i;
};

var addBinding := \s id loc mutable -> 
    s.setRecord <|
        hamt.set(id, {
            mutable: mutable,
            loc: loc
        }, s.record);

var modifyOwnBinding := \s id f-> 
    s.setRecord <|
        hamt.modify(id, f, s.record);

var modifyBinding := \f id s ->
    ?s.hasOwnBinding id
        :modifyOwnBinding(s, id, f)
        :(s.outer && s.setOuter(modifyBiding(f, id, s.outer)));

/**
 * Added a mutable binding for `id` declared at `loc` to `s`.
 * 
 * @param id Identifier for new binding
 * @param loc Location of binding in source code.
 * @param s Scope
 */
addMutableBinding := \id loc s ->
    addBinding(s, id, loc, MUTABLE);

/**
 * Added a immutable binding for `id` declared at `loc` to `s`.
 * 
 * @param id Identifier for new binding
 * @param loc Location of binding in source code.
 * @param s Scope
 */
addImmutableBinding := \id loc s ->
    addBinding(s, id, loc, IMMUTABLE);

/**
 * Added a trans mutable binding for `id` declared at `loc` to `s`.
 * 
 * @param id Identifier for new binding
 * @param loc Location of binding in source code.
 * @param s Scope
 */
addTransMutableBinding := \id loc s ->
    addBinding(s, id, loc, TRANS);

/**
 * Mark an existing binding for `id` immutable in scope `s`.
 * 
 * @param id
 * @param s
 */
markBindingImmutable := modifyBinding @ \ {loc} -> ({
    loc: loc,
    mutable: IMMUTABLE
});

/**
 * Mark an existing binding for `id` immutable in scope `s`.
 * 
 * @param id
 * @param keepTrans If the existing binding is tran, should this be preserved?
 * @param s
 */
markBindingMutable := \id keepTrans s ->
    modifyBinding(\binding -> ({
        loc: binding.loc,
        mutable: ?keepTrans && binding.mutable === TRANS : TRANS : MUTABLE
    }), id, s);

/* Definition Operations
 ******************************************************************************/
/**
 * Get the unique identifier for `id`.
 * 
 * @param id Identifier.
 * @param s SCope.
 */
getUid := \id s ->
    ?s.hasOwnBinding(id)
        :hamt.get(id, s.definitions)
        :(s.outer && getUid(id, s.outer));

/**
 * Register a unique identifier in scope `s`.
 * 
 * @param id Identifier
 * @param uid Unique identifier.
 * @param s Scope.
 */
addUid := \id uid s ->
    s
        .setDefinitions(
            hamt.set(id, uid, s.definitions))
        .setLocals(
            hamt.set(uid, id, s.locals));

/* Mapping Operations
 ******************************************************************************/
/**
 * Does this scope have its own a mapping for a given identifier.
 */
Scope.prototype.hasOwnMapping := \id =self->
    hamt.has(id, self.mapping);

/**
 * Does this scope have any mapping for a given identifier.
 */
Scope.prototype.hasMapping := \id =self->
    (  self.hasOwnMapping(id)
    || (self.outer??.hasMapping(id)));

/**
 * Get the mapped value for `id` in scope `s`.
 */
getMapping := \id s ->
    ?s.hasOwnMapping(id)
        :hamt.get(id, s.mapping)
        :s.outer && getMapping(id, s.outer);

/**
 * Create a modified scope with a new mapping.
 * 
 * @param from Key value.
 * @param to Value to map to.
 * @param s Scope
 */
addMapping := \from to s ->
    s.setMapping <|
        hamt.set(from, to, s.mapping);

/**
 * Add a new identifier to scope `s`.
 * 
 * @param id Source id name.
 * @param uid Unique id.
 * @param s Scope.
 */
addVar := \id uid s ->
    ?s.hasMapping(uid)
        :addMutableBinding(id, null, s)
    
    :let name := s.getUnusedId(id) in
        addMapping(
            uid,
            name,
            addMutableBinding(name, null, s));

/* Operations
 ******************************************************************************/
/**
 * Get a list of all valid uids in the current scope.
 * 
 * @param s Scope.
 */
getLocals := .locals \> hamt.keys;

/**
 * Get a list of all closure vars in the current scope.
 * 
 * @param s Scope.
 */
getClosure := .closure \> hamt.keys;

addRef := \uid s ->
    ?uid
        :s.setClosure <|
            hamt.set(uid, null, s.closure)
        :s;


/**
 * Enter a new empty scope with its parent set to `s`.
 * 
 * @param s Scope.
 */
push := \s ->
    Scope.empty
        .setOuter(s)
        .setDefinitions(s.definitions)
        .setPrefixOps(s.prefixOps);

/**
 * Pop scope.
 * 
 * @param s Scope.
 */
pop := let
    mergeLocals =
        hamt.fold @ \p {key value} -> hamt.set(key, value, p)
in
    \s ->
        s.outer
            .setLocals(
                mergeLocals(s.outer.locals, s.locals))
            .setClosure(
                mergeLocals(s.outer.closure, s.closure));;

/* Operator Operations
 ******************************************************************************/
addOperator := \name uid s ->
    s.setPrefixOps <|
        hamt.set(name, uid, s.prefixOps);

getOperators := .prefixOps \> hamt.pairs;

}