/**
 * @fileOverview Lexical checking of an AST and tagging of identifiers with unique
 * ids.
 */
package (
    check)
with
    import 'akh::base' {
        next
        'sequence': seq
        'sequencea': seqa},
    import 'akh::trans::statei' StateT,
    import 'akh::error' Error,
    import 'akh::trans::error' ErrorT,
    import 'akh::unique' Unique,
    
    import 'khepri-ast::expression' ast_expression,
    import 'khepri-ast::node' {
        'modify': modifyAstNode},
    import 'khepri-ast::value' ast_value,

    import 'zipper-m::trans::tree' TreeZipperT,
    
    import '../ast' {
        type
        isSymbol
        getUd
        setUd
        setUid},
    import '../fun' {flip foldl},
    import '../user_operator' {splitOp},
    import './scope' scope#{Scope},
    import './scopet' ScopeT
in {

/* Forward declarations
 ******************************************************************************/
var _check;

/* 
 ******************************************************************************/
var reserved := getUd @ 'reserved';

var getStart := \loc -> (loc && loc.start);

/* Monad
 ******************************************************************************/
var M = ErrorT (TreeZipperT (ScopeT (Unique)));

var run = \p s ctx ok err->
    Unique.runUnique(
        StateT.evalStateT(
            TreeZipperT.runTreeZipperT(
                ErrorT.runErrorT(
                    p,
                    ok \> M.inner.of,
                    err \> M.inner.of),
            ctx),
            s),
        1000);

var pass = M.of null;

var error = M.fail;

var lift = M.lift;

var unique = M.chain @ (M.liftInner.liftInner (Unique.unique));

// Scope Operations
////////////////////////////////////////
var extractScope = M.liftInner (M.inner.inner.extractScope);

var examineScope = M.chain @ extractScope;

var modifyScope = M.liftInner <\ M.inner.inner.modify;

var push = M.liftInner (M.inner.inner.push);
var pop = M.liftInner (M.inner.inner.pop);

var getClosure = M.chain @ (M.liftInner (M.inner.inner.getClosure));

// Movement Operations
////////////////////////////////////////
var extractCtx := lift (M.inner.get);

var extract := lift (M.inner.node);

var inspect := M.chain @ extract;

var up := lift (M.inner.up);
var down := lift (M.inner.down);
var left := lift (M.inner.left);
var right := lift (M.inner.right);

var root := lift (M.inner.root);

var moveChild :=  lift <\ M.inner.child;

var modifyNode := lift <\ M.inner.modifyNode;
var setNode := lift <\ M.inner.setNode;

/**
 * Move along `edge` and perform `actions`.
 * 
 * Returns to current node.
 */
var child := \edge ...actions ->
    seq(
        moveChild edge,
        seqa actions,
        up);

/**
 * Check the current node.
 */
var checkTop := inspect \ x -> _check x; // forward

/**
 * Move to child `edge` and check it.
 * 
 * Returns to current node.
 */
var checkChild := \edge ->
    child(edge,
        checkTop);

/**
 * Check all children of an array node.
 */
var checkArray := let
    visit = \_ i arr -> 
        ?i === arr.length - 1
            :checkTop
            :next(checkTop, right)
in
    \arr ->
        ?arr.length
            :seq(
                down,
                seqa arr.map(visit),
                up)
        :pass;

/* Operations
 ******************************************************************************/
/**
 * When `test` is true for current node, evaluate consequent. Otherwise evaluate
 * alternate.
 */
var when = \test consequent alternate ->
    inspect \ node ->
        ?test node
            :consequent
            :(alternate || pass);

/**
 * Create a new lexical block for body.
 */
var block = \-body(...)->
    seq(
        push,
        seqa body,
        pop);

/**
 * Define a new identifier and create a uid entry for it.
 */
var addUid = \id ->
    unique \ uid ->
        modifyScope (scope.addUid@(id, uid));

/**
 * Get the uid of an identifier.
 */
var getUid = \id ->
    extractScope.map (scope.getUid @ id);

/**
 * Ensure the current scope contains a binding for `id`.
 */
var checkHasBinding = \id, loc ->
    examineScope \ s ->
        ?scope.hasBinding(id, s)
            :pass
        :error("Undeclared symbol:'" + id + "' at:" + getStart loc);

/**
 * Ensure the current scope does not have has a binding for `id`.
 */
var checkCanAddBinding = \id loc -> 
    examineScope \ s ->
        ?s.hasOwnBinding(id)
            :let binding = s.getBinding(id) in
                error("'" + id + "' at:" + getStart loc + " already bound for scope from:" + getStart binding.loc)
        :pass;

/**
 * Ensure `id` is a mutable binding.
 */
var checkCanAssign = \id, loc -> 
    examineScope \ s ->
        ?scope.hasMutableBinding(id, s)
            :pass
        :error("Assign to immutable symbol:'" + id + "' at:" + getStart loc);

/**
 * Mark existing binding for `id` as immutable.
 * 
 * This must take place in the same scope the variable was declared in.
 */
var markBindingImmutable = \id loc ->
    examineScope \ s ->
        ?s.hasOwnBinding id
            :modifyScope (scope.setBindingMutability@(id, false))
        :error("Cannot mark symbol:'" + id + "' at:" + getStart loc + ' immutable in enclosed scope');

/**
 * Add a new mutable binding in the current scope.
 * Does not perform any checks.
 */
var addMutableBinding = \id loc -> 
    seq(
         modifyScope (scope.addMutableBinding@(id, loc)),
         addUid id);

/**
 * Adds a new static binding in the current scope.
 * 
 * Static binds are immutable and are not effected by renaming.
 * 
 * Does not perform any checks.
 */
var addStaticBinding = \id loc -> 
     modifyScope (scope.addImmutableBinding@(id, loc));

/**
 * Adds a new immutable binding in the current scope.
 * Does not perform any checks.
 */
var addImmutableBinding = \id loc -> 
    seq(
         modifyScope (scope.addImmutableBinding@(id, loc)),
         addUid id);

/**
 * Add a new mutable binding in the current scope.
 * Checks to make sure the new binding is valid.
 */
var addMutableBindingChecked = \id loc ->
    seq(
        checkCanAddBinding(id, loc),
        addMutableBinding(id, loc));

/**
 * Add a new immutable binding in the current scope.
 * Checks to make sure the new binding is valid.
 */
var addImmutableBindingChecked = \id loc ->
    seq(
        checkCanAddBinding(id, loc),
        addImmutableBinding(id, loc));

/**
 * Add a new immutable binding in the current scope.
 * Checks to make sure the new binding is valid.
 */
var addStaticBindingChecked = \id loc ->
    seq(
        checkCanAddBinding(id, loc),
        addStaticBinding(id, loc));

var splitUnary = \name ->
    extractScope.map \ s ->
        splitOp(name, scope.getOperators(s))
            .map \ c -> 
                setUid(c.(1), ast_value.UnaryOperator.create(null, c.(0)));

var addOperator = \name uid-> 
     modifyScope (scope.addOperator@(name, uid));
 
/* Checks
 ******************************************************************************/
var checks = {};

var addCheck = \type, check -> {
    if (Array.isArray(type))
        type.forEach \ x -> addCheck(x, check);
    else
        checks.(type) = check;
};

// Program and Packages
addCheck@'Program' <|
    block(
        checkChild 'body');

addCheck@'PackageExports' <|
    checkChild 'exports';

addCheck@'PackageExport' <| seq(
    inspect \ {id} ->
        addMutableBindingChecked(id.name, id.loc),
    checkChild 'id');

addCheck@'Package' <|
    block(
        checkChild 'exports',
        // Evaluate body in same scope
        child('body',
            when(type \> (=== 'WithStatement'),
                seq(
                    checkChild 'bindings',
                    child('body',
                        checkChild 'body')),
                checkChild 'body')));

// Declarations
addCheck@['StaticDeclaration', 'VariableDeclaration'] <|
    checkChild 'declarations';

addCheck@'StaticDeclarator' <|
    inspect \ {id} ->
        addStaticBindingChecked(id.name, id.loc);

addCheck@'VariableDeclarator' <| let
    bind = \node ->
        ?node.immutable
            :addImmutableBindingChecked(node.id.name, node.loc)
            :addMutableBindingChecked(node.id.name, node.loc)
in
    when((.recursive),
        seq(
            inspect bind,
            checkChild 'id',
            checkChild 'init'),
        seq(
            checkChild 'init',
            inspect bind,
            checkChild 'id'));

addCheck@'Binding' <|
    when((.recursive),
        seq(
            checkChild 'pattern',
            checkChild 'value'),
        seq(
            checkChild 'value',
            checkChild 'pattern'));

// Statement
addCheck@'BlockStatement' <|
    block(
        checkChild 'body');

addCheck@'ExpressionStatement' <|
    checkChild 'expression';

addCheck@'IfStatement' <| seq(
    checkChild 'test',
    block(
        checkChild 'consequent'),
    block(
        checkChild 'alternate'));

addCheck@'WithStatement' <|
    block(
        checkChild 'bindings',
        child('body',
            checkChild 'body'));

addCheck@'SwitchStatement' <|
    block(
        checkChild 'discriminant',
        checkChild 'cases');

addCheck@'SwitchCase' <| seq(
    checkChild 'test',
    checkChild 'consequent');

addCheck@['ReturnStatement', 'ThrowStatement'] <|
    checkChild 'argument';

addCheck@'TryStatement' <| seq(
    checkChild 'block',
    block(
        checkChild 'handler'),
    block(
        checkChild 'finalizer'));

addCheck@'CatchClause' <|
    block(
        inspect \ {param} ->
            addImmutableBindingChecked(param.name, param.loc),
        checkChild 'param',
        child('body',
            checkChild 'body'));

addCheck@'WhileStatement' <| seq(
    checkChild 'test',
    block(
        checkChild 'body'));

addCheck@'DoWhileStatement' <| seq(
    block(
        checkChild 'body'),
    checkChild 'test');

addCheck@'ForStatement' <|
    block(
        checkChild 'init',
        checkChild 'test',
        checkChild 'update',
        block(
            checkChild 'body'));

// Expression
addCheck@'FunctionExpression' <|
    block(
        when((.id),
            seq(
                inspect \ {id} ->
                    addImmutableBinding(id.name, id.loc),
                checkChild 'id')),
        
        // Attach closure data.
        // This must include the function's id
        getClosure \ closure ->
       
        seq(
            checkChild 'params',
            // Evaluate body in same scope
            child('body',
                when(type \> (=== 'BlockStatement'),
                    checkChild 'body',
                    checkTop)),
            
        getClosure \ locals ->
        modifyNode \ node ->
            setUd('locals', locals.filter(\x -> closure.indexOf(x) < 0), node)));

addCheck@'UnaryExpression' <| seq(
    checkChild 'argument',
    
    inspect \ {loc operator argument} ->
        splitUnary(operator.name).chain \ ops ->
            ?ops.length > 1
                :seq(
                    setNode <| ops.reduceRight(\p c ->
                        ast_expression.UnaryExpression.create(loc, c, p),
                        argument),
                    checkTop)
                :checkChild 'operator');

addCheck@'AssignmentExpression' <| seq(
    checkChild 'left',
    inspect \ {immutable left} ->
        ?isSymbol left
            :seq(
                checkCanAssign(left.name, left.loc),
                ?immutable
                    :markBindingImmutable(left.name, left.loc)
                    :pass)
            :pass,
    checkChild 'right');

addCheck@'BinaryExpression' <| seq(
    checkChild 'operator',
    checkChild 'left',
    checkChild 'right');

addCheck@'ConditionalExpression' <| seq(
    checkChild 'test',
    checkChild 'consequent',
    checkChild 'alternate');

addCheck@['CallExpression', 'NewExpression'] <| seq(
    checkChild 'callee',
    checkChild 'args');

addCheck@'MemberExpression' <| seq(
    checkChild 'object',
    when((.computed),
        checkChild 'property'));

addCheck@'CheckedMemberExpression' <| seq(
    checkChild 'object',
    when((.computed),
        checkChild 'property'),
    unique \ uid ->
    modifyNode \ node ->
        modifyAstNode @ node {
            'id' : setUid(uid, ast_value.Identifier.create(null, '__x'))
        });


addCheck@'ArrayExpression' <|
    checkChild 'elements';

addCheck@'ObjectExpression' <|
    checkChild 'properties';

addCheck@'LetExpression' <|
    block(
        checkChild 'bindings',
        checkChild 'body');

addCheck@'CurryExpression' <| seq(
    checkChild 'base',
    checkChild 'args');

addCheck@'OperatorExpression' <|
    checkChild 'operator';

// Patterns
addCheck@'EllipsisPattern' <|
    checkChild 'id';

addCheck@['SliceUnpack', 'RelativeUnpack', 'ImportPattern'] <|
    checkChild 'pattern';

addCheck@'IdentifierPattern' <| seq(
    inspect \ node#{loc id} ->
        ?reserved node
            :addImmutableBinding(id.name, loc)
            :addImmutableBindingChecked(id.name, loc),
    checkChild 'id');

addCheck@'AsPattern' <| seq(
    checkChild 'id',
    inspect \ node ->
        child('target',
            modifyNode \ target ->
                // Hack: For generating argument lists, we want to use the 
                // as pattern name if possible.
                setUd('id', node.id, target),
            checkTop));

addCheck@'ObjectPattern' <|
    checkChild 'elements';

addCheck@'ObjectPatternElement' <| seq(
    checkChild 'target',
    checkChild 'key');

addCheck@'ArgumentsPattern' <| seq(
    checkChild 'id',
    checkChild 'elements',
    checkChild 'self');

// Value
addCheck@'ObjectValue' <|
    checkChild 'value';

addCheck@['Identifier', 'BinaryOperator'] <|
    inspect \ node#{loc name} -> seq(
        checkHasBinding(name, loc),
        examineScope \ s ->
             setNode <| setUid(scope.getUid(name, s), node));

addCheck@['UnaryOperator'] <|
    inspect \ node#{loc name} -> seq(
        checkHasBinding(name, loc),
        examineScope \ s ->
            let uid = scope.getUid(name, s) in seq(
                setNode <| setUid(uid, node),
                addOperator(name, uid)));

/*
 ******************************************************************************/
_check := \node ->
    ?Array.isArray node
        :checkArray node
        :(checks.(type node) || pass);

var addGlobals := flip foldl @ \s c ->
    scope.addImmutableBinding(c, 'global', s);

var addUnaryOps := flip foldl @ \s c ->
    scope.addOperator(c, 'global', s);

var rewrite := seq(
    checkTop,
    root,
    extractCtx.chain \ x ->
    unique \ unique ->
    extractScope.map \ s -> ({
        tree: x,
        data: {
            unique: unique
        }
    }));

/**
 * Lexical check `ast` and rewrite it by taging every identifier with a unique id.
 * 
 * Returns result in `Error`.
 * 
 * @param ast Zippered khepri AST.
 * @param globals List of global identifiers.
 * @param builtinBinary List of global binary operators.
 * @param builtinUnary List of global unary operators.
 */
check = \ast globals builtinBinary builtinUnary ->
    run(
        rewrite,
        Scope.empty
            |> addGlobals@(globals || [])
            |> addGlobals@(builtinBinary || [])
            |> addUnaryOps@(builtinUnary || []),
        ast,
        Error.of,
        Error.fail);

}