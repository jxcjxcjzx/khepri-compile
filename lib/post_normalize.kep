/**
 * @fileOverview Post-lexical check tree normalization.
 * 
 * This stage is run once after identifiers have been assigned uids by lexical
 * check.
 * 
 * It rewrites complex Khepri statements to simplified forms that can be 
 * better optimized and transformed by later stages.
 */
package (
    normalize)
with
    import 'khepri-ast::node' {modify},
    import 'khepri-ast::statement' ast_statement,
    import 'khepri-ast::expression' ast_expression,
    
    import './ast' {
        type
        isBlockFunction},
    import './fun' {
        concat
        flattenr
        map},
    import './unpack' {
        innerPattern
        unpackParameters},
    import './builtin' {
        builtins
        definitions},
    import './rewriter' {
        UP
        DOWN
        Rewriter
        rewrite}
in {

var getParameterNames := 
    flattenr <\ map @ \x -> {
        switch (x.type) {
        case 'IdentifierPattern': return x;
        case 'AsPattern': return x.id;
        case 'SliceUnpack':
        case 'RelativeUnpack': return [];
        default: return x.ud.id;
        }
    };

/* Transforms
 ******************************************************************************/
var peepholes = new Rewriter();

var always := \_ -> true;

/* Binding Expansion
 ******************************************************************************/
/**
 * Expand potentially complex  bindings patterns to a list of simple
 * identifier bindings.
 */
peepholes.add(['LetExpression', 'WithStatement'], UP,
    always,
    
    let
        expandBinding = \binding ->
            ?type binding === 'ImportPattern'
                :binding
                :innerPattern(binding.value, binding.pattern, binding.recursive)
    in
        \node ->
            modify(node, {
                'bindings': flattenr <| map(expandBinding, node.bindings)
            }, {}));

/**
 * Expand potentially complex parameter patterns in a function to simple
 * identifier patterns for the arguments with a binding body to unpack
 * complex parameter binding values.
 */
peepholes.add('FunctionExpression', UP,
    always,
    
    \node -> let
        params = getParameterNames(node.params.elements),
        
        bindings = unpackParameters(node.params.id, node.params.elements),
        
        body = ?isBlockFunction node
            :ast_statement.BlockStatement.create(null,
                [ast_statement.WithStatement.create(null,
                    bindings,
                    node.body)])
            :ast_expression.LetExpression.create(null,
                bindings,
                node.body)
    in
        ast_expression.FunctionExpression.create(node.loc,
            node.id,
            modify(node.params, {'elements': params}, {}),
            body));

/* Expression Conversion
 ******************************************************************************/
var expandAssignment := \node ->
    ?node.right.type === 'AssignmentExpression'
        :let right = expandAssignment(node.right) in
            concat(
                right,
                ast_expression.AssignmentExpression.create(null, '=',
                    node.left,
                    right.(right.length - 1).left))
        :[node];

/**
 * Rewrite a potentially compound assignment expression to a list of single
 * assignments.
 */
peepholes.add('ExpressionStatement', UP,
    \{expression} ->
        (expression.type === 'AssignmentExpression'),
    
    \node ->
        ast_statement.BlockStatement.create(null,
            expandAssignment(node.expression)
                |> flattenr
                |> map @ (ast_statement.ExpressionStatement.create@null)));

/**
 * Rewrite left pipe to a call.
 */
peepholes.add('BinaryExpression', UP,
    \node ->
        (node.operator === '|>'),
    
    \{left right} ->
        ast_expression.CallExpression.create(null,
            right,
            [left]));

/**
 * Rewrite right pipe to a call.
 */
peepholes.add('BinaryExpression', UP,
    \node->
        (node.operator === '<|'),
    
    \{left right} ->
        ast_expression.CallExpression.create(null,
            left,
            [right]));

/**
 * Rewrite compose to use builtin compose code.
 */
peepholes.add('BinaryExpression', UP,
    \node->
        (  node.operator === '\\>'
        || node.operator === '\\>>'
        || node.operator === '<\\'
        || node.operator === '<<\\'),
    
    \{operator left right} ->
        ast_expression.CallExpression.create(null,
            definitions.(operator),
            [left, right]));

/* Interface
 ******************************************************************************/
normalize = rewrite @ peepholes;

}